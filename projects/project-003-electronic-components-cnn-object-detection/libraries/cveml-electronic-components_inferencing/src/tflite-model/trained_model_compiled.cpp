/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 25.12.2021 17:49:33

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 33280;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[15];
TfLiteEvalTensor tflEvalTensors[15];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[7];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,28,28,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 784, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[32] = { 12189, -7719, 23800, 5209, 2729, -21021, 3686, -666, -10898, -2041, 71282, -44177, 9224, 11813, 16083, -28359, -7269, 21286, 0, 20868, -4307, -4179, 329, 66974, 4599, 11211, -9191, 12765, 10031, -52871, -24764, 19626, };
const TfArray<1, int> tensor_dimension2 = { 1, { 32 } };
const TfArray<32, float> quant2_scale = { 32, { 5.8492969401413575e-06, 8.7096341303549707e-06, 5.9869403230550233e-06, 7.9174842539941892e-06, 7.2572811404825188e-06, 8.4521889220923185e-06, 9.0552430265233852e-06, 6.8869480855937582e-06, 7.5491989264264703e-06, 6.0552279137482401e-06, 4.9685745580063667e-06, 3.7355209769884823e-06, 5.6442063396389131e-06, 6.2408194025920238e-06, 6.368175945681287e-06, 6.2019371398491785e-06, 1.0634058526193257e-05, 6.0981647038715892e-06, 4.0802501644066069e-06, 5.257809334580088e-06, 3.6553299196384614e-06, 7.0049341047706548e-06, 9.2956997832516208e-06, 4.9957811825152021e-06, 7.3478913691360503e-06, 8.205459380405955e-06, 8.8975048129213974e-06, 6.2243166212283541e-06, 8.9345885498914868e-06, 3.0203220831026556e-06, 5.677798981196247e-06, 5.4087777243694291e-06, } };
const TfArray<32, int> quant2_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 1033, 3846, -8667, 2524, 1850, -3315, 2464, 2014, -3223, 2025, 3684, 3129, -2929, 1789, -2450, -6707, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 2.3815973690943792e-05, 2.2205000277608633e-05, 2.6329731554142199e-05, 2.3186983526102267e-05, 2.3850054276408628e-05, 2.6470665034139529e-05, 2.6577048629405908e-05, 2.381501326453872e-05, 2.4396722437813878e-05, 2.5800847652135417e-05, 2.4133820261340588e-05, 2.1392175767687149e-05, 2.5860486857709475e-05, 2.6642701413948089e-05, 2.4621362172183581e-05, 2.2858746888232417e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[4] = { 1433, 93, -578, 301, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00011791755969170481, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[4*784] = { 
  16, 22, -4, 2, -51, 7, 10, 24, -62, -39, -11, -50, 17, 24, 14, 14, 35, 18, -26, -23, -68, -78, -93, 35, -54, -43, -58, -84, 30, -81, -60, -99, 28, 9, -20, -64, -78, -77, -108, 18, -83, -62, -83, -85, 39, -120, -80, -117, 36, 9, -39, -65, -72, -77, -121, 15, -82, -68, -95, -99, 67, -115, -94, -110, 27, -2, -22, -76, -67, -42, -100, 26, -99, -66, -95, -102, 69, -112, -98, -103, 45, 7, -37, -84, -73, -71, -115, 35, -82, -74, -91, -81, 58, -114, -94, -106, 23, -3, 24, -27, 17, -79, -73, 21, -56, 23, -38, -76, 61, -62, 2, -7, 25, 29, -39, -33, -33, 13, 2, 27, -69, -29, -13, -15, 13, 21, -36, -48, -18, -68, -48, -38, -72, -48, -59, -63, -52, -55, -49, -66, 5, -65, -43, -62, -66, -95, -41, -83, -81, -46, -88, -106, -62, -72, -52, -80, 15, -93, -39, -66, -90, -116, -32, -96, -63, -52, -105, -122, -61, -53, -66, -92, 15, -99, -50, -53, -88, -105, -32, -105, -78, -42, -111, -114, -36, -50, -60, -94, 22, -127, -56, -40, -99, -115, -21, -85, -76, -54, -94, -116, -35, -48, -52, -110, 18, -109, -50, -49, -103, -105, 14, -51, 18, -51, -74, -89, -80, 17, -53, -96, 26, -114, -18, -55, 19, 17, -67, -40, -29, 19, 16, 27, -99, -22, -29, -10, 13, 26, -39, -55, -30, -39, -49, -37, -28, -41, -27, -57, -85, -29, -37, -64, 11, -33, -24, -78, -27, -62, -52, -34, -52, -39, -44, -45, -77, -49, -31, -65, 19, -43, -20, -68, -47, -71, -42, -42, -17, -48, -29, -68, -50, -24, -38, -69, 28, -39, -21, -42, -55, -65, -20, -58, -48, -60, -31, -62, -49, -30, -42, -71, 25, -59, -19, -46, -56, -57, -24, -58, -61, -59, -51, -74, -54, -26, -42, -87, 8, -60, -25, -43, -71, -67, 21, -29, 20, -60, -60, -62, -96, 9, -33, -87, 25, -68, 2, -10, 33, 22, -93, -29, -45, 16, 5, 26, -114, -29, -22, -35, 18, 27, -25, -52, -31, -52, -69, -30, -38, -42, -40, -62, -116, -25, -62, -81, 14, -43, -50, -93, -46, -60, -80, -42, -35, -44, -41, -58, -102, -37, -48, -76, 21, -68, -49, -87, -18, -32, -48, 11, 22, -32, -16, -30, -80, -28, -49, -30, 16, -33, -44, -54, -19, -43, -42, -4, -32, -53, -23, -50, -58, -20, -30, -47, 10, -25, -28, -53, -52, -70, -24, -56, -73, -64, -68, -70, -62, -53, -45, -79, 22, -81, -47, -46, -74, -75, 19, -33, 21, -66, -73, -63, -114, 14, -37, -86, 16, -89, -18, -10, 14, 20, -62, -23, -45, 16, -9, 23, -81, -38, -14, -12, 13, 29, -31, -38, -10, -41, -48, -30, -41, -52, -31, -54, -76, -32, -40, -71, 21, -43, -46, -84, -40, -59, -45, -52, -43, -47, -55, -59, -88, -44, -46, -60, 12, -58, -40, -80, -34, -36, -52, -25, -15, -56, -48, -55, -72, -25, -55, -65, 8, -43, -49, -76, -34, -56, -39, -21, -25, -54, -49, -61, -73, -27, -43, -84, 23, -73, -45, -63, -56, -79, -17, -51, -59, -65, -49, -72, -45, -39, -49, -83, 23, -78, -50, -58, -73, -75, 25, -29, 15, -62, -72, -54, -87, 19, -44, -78, 26, -88, -2, -7, 24, 25, -46, -40, -36, 24, 6, 27, -59, -30, 0, -4, 17, 31, -14, -22, -42, -58, -38, -47, -58, -33, -71, -58, -43, -57, -55, -60, 9, -64, -59, -52, -55, -61, -49, -49, -68, -44, -82, -69, -50, -74, -57, -90, 16, -90, -58, -61, -70, -92, -43, -81, -69, -61, -69, -89, -52, -65, -62, -87, 17, -87, -48, -65, -83, -104, -55, -83, -64, -62, -85, -98, -43, -63, -55, -109, 17, -103, -47, -60, -83, -98, -36, -93, -78, -43, -87, -94, -60, -77, -52, -107, 13, -96, -61, -47, -79, -91, 9, -50, 24, -46, -76, -59, -107, 16, -51, -87, 38, -88, -9, -14, 15, 19, 1, -5, -23, 7, 12, -3, -48, -35, 5, 13, 10, 20, 25, 13, -32, -93, -29, -50, -63, -46, -28, -69, -83, -54, 2, -74, 19, -35, 6, -91, -31, -95, -39, -72, -78, -61, -27, -76, -81, -56, -15, -88, 17, -44, -9, -88, -41, -99, -39, -94, -86, -50, -42, -70, -100, -76, -13, -75, 24, -56, 1, -94, -48, -93, -52, -91, -73, -49, -48, -81, -96, -54, -20, -78, 37, -58, 6, -100, -48, -101, -58, -81, -76, -48, -43, -75, -102, -59, -21, -84, 42, -53, -6, -97, -36, -91, 20, -24, 21, -58, -13, -64, -11, 18, -5, -72, 39, -48, 28, -10, 
  -11, -7, 6, 27, 3, -1, 21, -9, -17, 28, 12, -31, -16, 2, 10, 5, 15, 11, -28, 14, 10, -35, 27, -1, 3, 28, 29, -17, -10, 35, 39, -6, 10, -6, -12, 22, 8, -55, 20, -5, 23, 46, 43, -29, -16, 22, 54, -8, 15, 8, -7, 16, 6, -43, 13, 4, 0, 43, 28, -7, 0, 23, 32, -8, 4, 3, 7, -11, 9, -3, 11, -2, 33, 31, 34, -1, 0, 24, 40, -10, 6, 7, 4, -6, 4, 42, 3, -3, 34, 40, 19, 4, -5, 7, 26, 0, 5, 0, 3, -24, -1, 62, 5, 4, -3, -7, -9, 21, -6, -5, -7, 1, -7, 1, 9, 20, 45, -6, 24, 21, 14, 46, 27, -22, -7, 0, 33, -5, -6, 15, -7, 17, 42, -27, 30, 14, 14, 35, 36, 7, -13, 26, 40, -14, -9, 3, -18, 16, 37, -3, 30, 8, 33, 49, 55, 1, -12, 25, 69, -32, -1, 7, -23, 10, 46, 7, 30, -1, 34, 64, 60, 6, -16, 19, 47, -34, 1, 3, -23, 4, 27, 31, 29, -4, 29, 60, 60, 1, -5, 4, 48, -35, -20, 1, -40, -8, 20, 30, 7, 3, 45, 32, 50, 4, 1, -15, 36, -56, 5, 3, -2, -14, -16, 63, -16, -33, -4, -5, -20, 14, 1, -2, -47, 1, -5, -5, 15, 14, 31, -23, 33, -5, 41, 44, 58, -23, -20, -6, 38, -3, -24, 5, 2, 11, 29, -23, 42, 6, 16, 37, 37, -8, -15, 13, 40, -10, -16, 0, -11, 16, 38, 9, 19, 2, 36, 48, 54, 1, -7, 0, 58, -46, -6, -2, -50, 15, 64, 10, 19, 3, -1, 62, 38, 4, -12, 7, 42, -60, -14, 14, -31, 0, 32, 13, 29, 3, 17, 65, 67, 4, -3, 10, 58, -65, -16, 1, -38, -10, 17, 27, 3, -4, 24, 50, 52, 1, -11, -19, 35, -70, -4, -5, -4, -5, -10, 76, -10, -32, -5, -10, -8, 6, 7, -17, -36, 1, -10, -6, -8, 12, 45, -25, 37, -22, 54, 43, 49, -27, -13, -8, 30, -4, -23, 12, 0, 18, 47, -17, 28, 12, 26, 49, 33, 3, -13, 12, 30, -20, -19, -2, -3, 10, 41, -2, 30, -4, 41, 36, 52, 1, -19, -2, 59, -41, -13, 7, -34, 19, 52, 15, 16, 6, -1, 63, 42, -2, -11, 1, 30, -51, 0, 7, -22, -6, 36, 29, 31, 0, 14, 65, 64, 8, -7, 0, 49, -42, -20, -5, -41, -2, 14, 19, 8, -8, 28, 51, 59, 6, -10, -22, 36, -41, -2, -9, -1, -7, -11, 63, -6, -31, -3, -12, -3, 1, 3, -16, -35, 4, -8, 4, -6, 19, 54, -21, 25, 1, 23, 44, 44, -18, -19, 0, 22, -2, -2, 1, -6, 11, 45, -12, 30, 9, 21, 38, 31, 7, -11, 5, 29, -14, -15, -5, -21, 13, 39, -7, 30, -11, 35, 50, 64, -10, -14, -5, 64, -35, -15, -5, -38, 3, 52, 15, 9, -7, 25, 61, 37, -5, -7, -13, 35, -45, -7, 1, -47, 16, 36, 18, 32, -9, 18, 75, 58, 10, 3, -14, 39, -54, -10, 0, -74, -1, 12, 28, 7, -11, 32, 45, 68, 0, 3, -17, 38, -63, 6, -11, -8, 1, -8, 75, -11, -26, -2, 1, -20, 19, 8, -20, -42, 3, -3, 4, -7, -3, 35, -10, 38, -2, 6, 28, 26, -16, -12, -12, 27, 3, -8, 4, -7, 6, 43, 5, 18, 9, 25, 32, 36, 0, -9, 15, 43, -14, -1, -3, -18, 10, 58, 12, 31, 15, 25, 45, 63, -3, -7, -3, 55, -30, -1, 7, -29, 8, 63, 10, 15, 15, 38, 66, 52, 4, -8, 4, 53, -28, 5, 6, -27, 15, 43, 14, 27, 8, 29, 68, 60, 13, -9, -8, 61, -37, -6, -4, -57, -9, -4, 19, 1, -13, 49, 42, 46, 6, -2, -15, 44, -44, 20, 10, -2, -18, -17, 65, -7, -28, -12, -3, -37, 20, 7, -12, -48, 2, 2, 5, -2, 21, 25, -18, 7, 43, -8, 29, -1, -8, -10, 7, -4, 9, 21, 25, 15, 16, 31, -48, -7, 38, -1, 34, 12, -19, -8, 41, 3, 17, 1, 3, 7, 13, 33, -53, 6, 8, 15, 55, 24, -20, -7, 3, -4, 15, 13, 18, -1, 8, 34, -30, 5, 15, 13, 41, 14, -17, -1, 6, -17, 4, -3, 20, -8, 0, 11, 9, -1, 11, 18, 27, 19, -11, 2, 1, -14, 2, -18, -6, -13, -6, 40, 2, 14, -11, 26, 52, 32, 2, -3, -7, -13, -2, 7, 8, -3, 6, -10, 25, 6, 0, 1, -8, -8, 12, 0, -3, 1, 7, 
  -9, -13, -16, 10, 11, -8, -19, -12, 24, 16, 14, -5, -7, -7, 20, 2, -22, -17, -13, 11, -5, 28, 4, -8, -8, 3, 6, 21, -10, 13, -9, 15, -19, -14, -52, 16, -17, 61, 19, -12, -47, -28, -16, 35, -15, 19, -16, 23, -8, -2, -65, 5, -1, 70, 20, -4, -41, -33, -16, 22, -12, 36, -3, 14, -16, 2, -61, 30, 3, 26, 23, -2, -71, -20, -12, 19, -8, 35, -8, 5, -13, 4, -35, 47, 3, -16, 34, -1, -31, -6, -5, 16, -11, 36, 21, 11, -9, -7, 1, 37, -1, -32, 39, 4, 16, 0, 27, 5, -18, 12, 20, -2, -10, -14, -3, 1, -1, -9, -27, -14, -26, 1, -13, 2, 7, -10, -1, -2, 36, 25, -5, -2, -6, 20, -1, 2, -36, -11, -15, 16, -2, 1, -13, -9, 43, 32, -17, 7, -3, 40, -11, 29, -79, -27, -41, 32, -9, 12, -32, -6, 61, 26, -19, 12, -40, 19, 11, 20, -90, -41, -31, 21, -13, 36, -30, -17, 56, 13, -20, 14, 2, -2, -2, 36, -102, -50, -48, 8, -15, 35, -42, 1, 56, 34, 15, 21, 31, -16, 44, 37, -71, -2, -26, 16, -17, 40, -13, 34, 23, 32, -4, 46, -3, -58, 59, 59, 17, -2, 42, 25, -23, 31, 38, 0, -8, -19, -7, -11, -20, -3, -27, 9, -42, 0, -31, 5, -9, -14, -12, -5, 46, 13, -19, -12, -21, 2, -11, 5, -61, -18, -16, 4, -14, 4, -4, -18, 44, 27, -15, 13, -17, 8, -6, 25, -88, -22, -38, 19, 0, 3, -43, 10, 54, 12, 0, 12, -37, 21, 8, 26, -57, -45, -27, 23, -17, 27, -22, 26, 50, 20, 13, 12, -1, 3, -1, 16, -48, -48, -39, 10, 1, 35, -24, 23, 56, 34, 14, 29, 5, -17, 48, 28, -70, -9, -31, 7, -15, 47, -2, 28, 23, 32, -6, 27, 4, -77, 51, 57, 9, -11, 28, 0, -16, 48, 39, 5, -7, -17, -18, -7, -23, -3, -38, -1, -55, -19, -45, 7, -2, -5, -21, -3, 51, 18, -19, -7, -39, 23, 0, 11, -66, -20, -24, 15, -9, 19, -12, -18, 34, 31, -19, 2, -31, 4, 0, 23, -91, -26, -45, 27, 0, 15, -38, 0, 42, 24, -4, 11, -42, 5, 7, 22, -35, -41, -17, 10, -8, 18, -26, 16, 46, 16, -6, -1, -13, 0, -3, 20, -35, -40, -39, 4, -12, 14, -42, 16, 50, 21, 2, 28, -1, -21, 18, 25, -44, -24, -34, 20, -14, 34, -38, 29, 29, 32, 0, 19, -2, -65, 28, 51, 12, -11, 24, 17, -18, 30, 37, 16, -14, -9, -19, -4, -21, -3, -40, 6, -37, -16, -35, 1, -12, -8, -20, -4, 30, 5, -22, -6, -30, 9, 1, 3, -40, -27, -17, 14, -3, 6, -3, -20, 47, 26, -28, 11, 2, 12, -4, 21, -83, -26, -50, 17, 0, 19, -41, 3, 49, 20, 3, 20, -20, 17, 12, 27, -65, -28, -22, 17, -15, 22, -32, 14, 57, 29, -4, 17, -18, 7, -11, 29, -63, -59, -39, 12, -9, 25, -30, 16, 59, 35, 25, 14, 46, -18, 34, 38, -51, -14, -33, 4, -15, 35, -31, 37, 35, 33, -7, 20, -1, -66, 47, 56, 11, -2, 39, 3, -24, 33, 35, -2, -10, -17, -20, 12, -2, -9, -34, 1, -21, 1, -12, 0, -5, -17, 1, 1, 28, 13, -30, 17, -13, 9, -8, 7, -25, -16, -14, 7, -1, 7, -27, -26, 43, 18, -45, 12, -18, 16, -15, 20, -78, -27, -29, 28, -8, 21, -43, 7, 48, 26, -48, 14, -32, 27, 3, 30, -97, -42, -35, 27, -6, 32, -45, -13, 44, 22, -44, 13, -7, 11, -8, 29, -101, -45, -33, 13, -10, 41, -54, -9, 35, 28, 18, 20, 37, -12, 38, 34, -81, -9, -21, 13, -6, 54, -32, 19, 17, 38, -2, 23, 8, -55, 50, 59, 20, 2, 55, 12, -16, 41, 47, 0, -5, -19, -4, 7, 4, -14, -22, -40, 12, 14, -1, -32, 10, -6, -9, 2, 9, 27, 4, 18, 6, 17, -2, -3, 8, 12, -12, 22, 4, -11, -8, 4, 35, 28, 8, 15, -2, 27, -17, 12, -13, -10, -27, 37, 0, 8, -3, 13, 38, 26, 3, 26, 5, 19, 6, 19, -24, -30, -15, 33, -5, 24, -5, 12, 35, 26, 7, 21, 9, -4, -2, 27, -39, -20, -19, 19, -6, 19, 4, 2, 33, 34, 12, 25, 10, -18, 4, 34, -27, -13, -37, 13, -10, 26, 2, 21, 13, 32, -1, 8, 1, -44, 3, 36, 13, -5, 5, -2, -9, 31, 3, 1, 
  4, 14, 31, -54, -5, 19, 13, 8, 8, -64, -58, 37, -1, 7, -56, 16, -6, -1, 49, -40, 8, 59, -41, 11, 28, -31, -52, 24, -1, -57, -61, 20, 2, -8, 63, -21, 17, 15, -30, 0, 38, 10, -22, 12, 2, -49, -30, 19, -7, 3, 96, -18, 34, -24, -38, 2, 61, 46, -2, 9, 8, -61, -41, 25, 0, 3, 65, -11, 12, -10, -21, -2, 65, 48, 17, 0, 12, -49, -17, 20, 14, 7, 55, -22, -33, -2, -35, -4, 36, -5, -12, -6, 9, -33, -44, 10, 11, -13, -3, -46, -1, 7, -44, 1, -13, 4, -21, -12, 13, -33, -13, 3, 7, 22, 39, -40, -65, 11, -15, 15, 7, -71, -38, 5, 19, 8, -28, 12, -52, -25, 66, -13, -59, -18, -39, -1, 21, -52, -29, -18, 3, -39, -27, 37, -41, -42, 49, -24, -64, -33, -29, -4, 38, -49, -8, -32, 9, -30, -13, 47, -91, -53, 69, -21, -21, -59, -9, -24, 54, -21, -5, -28, 9, -44, -32, 55, -57, -32, 61, -10, -38, -28, -19, -9, 61, -35, -6, -6, 6, -49, -23, 69, -39, -22, 58, -20, -63, -12, -45, -3, 51, -17, -33, -13, 6, -42, -28, 45, -27, -61, 6, -33, -10, -4, -53, -47, -15, 4, -47, -4, 9, -50, -14, 1, 8, 9, 38, -2, -44, 22, 10, 20, 17, -77, -40, 29, 7, 5, -38, 27, -34, -24, 48, 16, -36, 4, -21, 8, 49, -51, -17, 0, 5, -20, -22, 63, -40, -29, 60, -9, -47, -23, -36, -6, 78, -61, -6, -6, 10, -29, -23, 75, -83, -50, 65, -33, -27, -44, -41, -30, 47, -53, -28, -21, 10, -40, -33, 82, -78, -23, 77, -25, -24, -36, -20, -19, 54, -62, -15, -19, 10, -54, -27, 87, -53, -45, 70, -25, -49, -4, -41, -25, 41, -37, -30, -13, -5, -55, -46, 70, -56, -31, 6, -24, 2, 17, -53, -13, -8, -4, -28, -6, 9, -52, -17, 13, 11, 11, 46, -19, -28, 13, 7, 14, 19, -55, -29, 12, 14, 16, -29, 29, -70, -25, 62, 5, -40, -11, -24, -8, 58, -23, -15, 3, 12, -19, -2, 60, -57, -27, 70, -13, -38, -14, -19, -12, 69, -61, -1, -3, 10, -8, -23, 61, -82, -32, 69, -12, -40, -44, -24, -16, 48, -68, -24, -15, 12, -27, -36, 61, -61, -10, 71, -10, -37, -39, -6, -10, 34, -68, -33, -12, 13, -35, -17, 59, -70, -23, 67, -13, -35, -19, -8, -17, 18, -60, -25, 2, 5, -20, 1, 61, -49, -20, 12, 4, 1, 12, -28, -27, -9, -2, -14, 6, 11, -32, -7, 18, 4, 20, 43, -20, -34, 26, -3, 27, 12, -59, -23, 22, 0, 13, -26, 24, -68, -31, 51, -10, -30, 12, -16, -3, 43, -36, -7, 6, 14, -25, -14, 60, -62, -21, 63, -23, -64, -4, -21, -21, 57, -63, -18, -11, 11, -24, -23, 71, -89, -35, 75, -11, -54, -14, -21, -35, 36, -67, -36, -21, 10, -49, -32, 66, -78, -20, 80, -4, -69, -27, -26, -22, 46, -65, -30, -10, 11, -38, -16, 66, -55, -34, 72, -26, -78, -23, -29, -6, 17, -51, -12, -22, 8, -26, 2, 54, -47, -38, 5, -26, -1, 10, -41, -25, -19, 4, -16, -9, 11, -33, -6, 7, 5, 16, 15, -46, -53, 18, -1, 24, -10, -72, -37, 10, 8, 2, -44, 28, -99, -39, 47, -17, -39, -11, -21, -18, 19, -49, -25, -13, 4, -36, -39, 45, -72, -46, 61, -16, -70, -39, -33, -30, 46, -50, -21, -13, 7, -15, -14, 60, -105, -35, 74, -9, -57, -38, -24, -31, 52, -57, -14, -7, 6, -41, -4, 62, -79, -19, 74, -2, -62, -27, -20, -25, 54, -52, -11, -2, 3, -41, 13, 61, -43, -19, 57, -17, -79, -19, -31, -29, 29, -53, -23, -9, 10, -19, -5, 40, -36, -46, 5, -33, 1, -5, -47, -43, -16, 7, -34, -4, 12, -33, 0, 4, 6, 13, 6, -40, -68, 47, 19, 9, -3, -89, -7, 37, 7, 15, -6, 9, -96, -46, 6, -16, -56, 42, 5, -37, -6, -52, -9, 20, 6, -27, 0, 2, -74, -31, 3, -15, -59, 36, 9, -48, 9, -31, 22, 5, 2, -6, 3, 3, -84, -59, 9, -18, -59, 26, 13, -42, 33, -25, 27, -13, 13, -37, 4, 18, -51, -30, 13, 6, -54, 21, -7, -25, 44, -3, 28, 0, 5, -30, 9, 11, -16, -43, -1, -13, -85, 32, -15, -47, 14, -54, -11, -13, 6, -28, -4, -5, -24, -68, 2, -12, 0, 34, -4, -46, -4, -4, -13, -23, 4, -30, 9, 0, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 4,784 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0079733375459909439, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[32*3*3*1] = { 
  /* [0][0][][] */ -71, 54, 60, 
  /* [0][1][][] */ -22, -70, -115, 
  /* [0][2][][] */ 127, 21, -58, 
  /* [1][0][][] */ 74, 56, -26, 
  /* [1][1][][] */ 81, -10, -127, 
  /* [1][2][][] */ 70, -52, -33, 
  /* [2][0][][] */ -10, -127, -29, 
  /* [2][1][][] */ 83, 39, -56, 
  /* [2][2][][] */ -14, -68, 83, 
  /* [3][0][][] */ -48, 127, -102, 
  /* [3][1][][] */ 10, 50, -85, 
  /* [3][2][][] */ 89, -3, -90, 
  /* [4][0][][] */ -60, -26, -127, 
  /* [4][1][][] */ -1, -14, 11, 
  /* [4][2][][] */ 30, 84, 120, 
  /* [5][0][][] */ 67, 12, -9, 
  /* [5][1][][] */ 127, 64, -17, 
  /* [5][2][][] */ 27, -25, -122, 
  /* [6][0][][] */ -127, -42, -123, 
  /* [6][1][][] */ 8, 63, -19, 
  /* [6][2][][] */ 26, 117, 39, 
  /* [7][0][][] */ -118, -68, -92, 
  /* [7][1][][] */ -12, -72, 47, 
  /* [7][2][][] */ 108, 127, 104, 
  /* [8][0][][] */ 89, -51, -100, 
  /* [8][1][][] */ 124, 4, 3, 
  /* [8][2][][] */ 127, -54, -87, 
  /* [9][0][][] */ 10, 15, 79, 
  /* [9][1][][] */ 93, 71, 94, 
  /* [9][2][][] */ 96, 127, 6, 
  /* [10][0][][] */ -106, -58, -93, 
  /* [10][1][][] */ 11, 32, -32, 
  /* [10][2][][] */ -112, -61, -127, 
  /* [11][0][][] */ 115, -127, 56, 
  /* [11][1][][] */ 113, -16, 115, 
  /* [11][2][][] */ 12, 53, -40, 
  /* [12][0][][] */ 84, -115, 2, 
  /* [12][1][][] */ 113, -93, 25, 
  /* [12][2][][] */ 99, -127, -26, 
  /* [13][0][][] */ 2, -46, -127, 
  /* [13][1][][] */ 12, 99, 20, 
  /* [13][2][][] */ -35, 47, -16, 
  /* [14][0][][] */ -55, -1, 127, 
  /* [14][1][][] */ -45, -34, 36, 
  /* [14][2][][] */ -109, -80, 91, 
  /* [15][0][][] */ -127, -104, 49, 
  /* [15][1][][] */ 105, 49, 14, 
  /* [15][2][][] */ 93, 117, -48, 
  /* [16][0][][] */ -72, 19, 51, 
  /* [16][1][][] */ -23, -33, 64, 
  /* [16][2][][] */ -63, -51, 127, 
  /* [17][0][][] */ -81, 64, 18, 
  /* [17][1][][] */ -79, 119, -127, 
  /* [17][2][][] */ -13, 83, -116, 
  /* [18][0][][] */ -89, -127, 0, 
  /* [18][1][][] */ -45, -30, -35, 
  /* [18][2][][] */ 10, -98, -35, 
  /* [19][0][][] */ -31, -29, 45, 
  /* [19][1][][] */ 89, -124, 127, 
  /* [19][2][][] */ -66, -41, -54, 
  /* [20][0][][] */ -112, 8, 30, 
  /* [20][1][][] */ -10, -46, 4, 
  /* [20][2][][] */ -11, -4, -127, 
  /* [21][0][][] */ -67, -85, -62, 
  /* [21][1][][] */ -42, -19, 57, 
  /* [21][2][][] */ 106, 127, 40, 
  /* [22][0][][] */ -15, 127, 1, 
  /* [22][1][][] */ 48, 48, 13, 
  /* [22][2][][] */ -77, -100, -69, 
  /* [23][0][][] */ -48, -84, -113, 
  /* [23][1][][] */ -67, 56, 32, 
  /* [23][2][][] */ -88, -127, -74, 
  /* [24][0][][] */ 45, 57, 87, 
  /* [24][1][][] */ -127, -88, 4, 
  /* [24][2][][] */ -22, -16, 38, 
  /* [25][0][][] */ 75, -101, -39, 
  /* [25][1][][] */ 127, -51, -54, 
  /* [25][2][][] */ 69, -110, -24, 
  /* [26][0][][] */ 52, 76, 109, 
  /* [26][1][][] */ -92, 52, 76, 
  /* [26][2][][] */ -127, -49, -3, 
  /* [27][0][][] */ 127, 88, 35, 
  /* [27][1][][] */ -82, -90, -102, 
  /* [27][2][][] */ -19, -9, -1, 
  /* [28][0][][] */ 76, 61, 127, 
  /* [28][1][][] */ -58, -38, -53, 
  /* [28][2][][] */ -55, -50, -94, 
  /* [29][0][][] */ 23, -77, 53, 
  /* [29][1][][] */ 67, 127, 21, 
  /* [29][2][][] */ -79, 51, 118, 
  /* [30][0][][] */ -77, 42, 86, 
  /* [30][1][][] */ 45, -31, 127, 
  /* [30][2][][] */ -20, -67, 120, 
  /* [31][0][][] */ 84, 63, 4, 
  /* [31][1][][] */ 27, -75, 127, 
  /* [31][2][][] */ -124, -98, -90, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 32,3,3,1 } };
const TfArray<32, float> quant6_scale = { 32, { 0.0014915706124156713, 0.0022209566086530685, 0.0015266697155311704, 0.0020189583301544189, 0.0018506065243855119, 0.0021553081460297108, 0.0023090867325663567, 0.0017561716958880424, 0.0019250456243753433, 0.0015440830029547215, 0.0012669864809140563, 0.00095255777705460787, 0.0014392725424841046, 0.001591408858075738, 0.0016238847747445107, 0.0015814938815310597, 0.0027116846758872271, 0.0015550318639725447, 0.0010404636850580573, 0.001340741291642189, 0.00093210907652974129, 0.0017862580716609955, 0.0023704033810645342, 0.0012739241356030107, 0.0018737121718004346, 0.0020923919510096312, 0.0022688636090606451, 0.0015872006770223379, 0.002278320025652647, 0.00077018205774948001, 0.0014478386146947742, 0.0013792382087558508, } };
const TfArray<32, int> quant6_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[16*3*3*32] = { 
  /* [0][0][][] */ 15,-3,14,-84,-15,-23,-17,-8,-7,-16,-84,-21,0,-25,28,-18,88,-125,13,13,6,3,-47,-55,23,-95,-20,76,-38,-22,-31,42, 19,-9,25,-127,-15,-28,-53,-16,-42,-4,-67,-7,5,12,90,19,96,-126,-14,42,8,-21,-84,-39,52,-93,-6,54,-68,-15,-16,22, -23,7,-14,-10,-18,2,-61,-9,-8,8,80,9,1,-21,41,15,114,-21,4,4,4,0,-102,53,13,-29,12,-18,-95,-6,-8,-4, 
  /* [0][1][][] */ 41,-10,37,-92,10,-17,-45,-3,-2,-11,-53,-16,-7,26,19,9,79,-69,-8,38,16,12,-37,-10,-9,-110,-11,32,-24,8,-1,-3, 41,-45,40,-76,5,-9,-39,19,15,9,-56,-16,-15,33,98,17,88,-61,-3,50,-15,12,-23,-12,37,-115,-12,-10,-76,-3,10,6, 15,11,7,6,13,15,-55,-8,14,13,30,17,5,-8,47,13,86,4,9,15,-15,1,-24,7,24,-21,14,-18,-113,12,5,-19, 
  /* [0][2][][] */ 13,2,26,-81,-13,11,-89,18,7,-10,19,-8,-7,27,19,7,90,-32,9,16,5,-3,-19,32,-11,-31,-7,23,-3,-3,-13,-19, 10,0,23,-15,1,-3,-62,21,17,-6,21,24,7,27,65,35,71,2,13,17,3,4,-17,37,46,-16,-1,28,-24,-3,3,-10, -6,26,26,6,-8,33,-82,-3,36,8,65,28,27,-4,1,32,42,25,6,0,12,12,-16,57,3,5,17,-13,-18,0,6,-13, 
  /* [1][0][][] */ 26,28,20,-77,2,-2,-46,19,0,-12,32,0,1,16,-34,-7,14,-112,5,22,12,-3,-81,15,-24,-103,-16,50,-84,0,-8,12, 39,4,61,-88,5,-6,-59,8,-9,-10,23,-12,11,16,31,18,52,-86,12,55,-15,5,-15,-10,-15,-96,-20,58,-61,-24,-26,49, 8,-7,51,-14,13,-15,24,8,-16,7,104,-14,13,19,70,-3,94,10,-16,40,12,-7,5,60,27,17,10,18,-127,-19,-6,32, 
  /* [1][1][][] */ -2,10,31,-101,5,2,-57,-16,23,1,12,-12,10,28,-21,-24,-26,-110,-4,9,-10,2,-66,6,-28,-120,9,43,-20,-3,-22,2, 18,-12,70,-104,5,-24,-32,17,1,-9,-10,-20,4,40,52,-12,45,-90,-18,46,-3,-10,-47,1,34,-127,-5,66,14,-25,-2,49, 18,-17,59,-17,-7,-16,5,22,-4,-8,55,-10,4,7,77,18,77,5,7,28,-8,13,-26,6,28,-16,12,49,-16,4,21,14, 
  /* [1][2][][] */ 10,17,30,-96,14,-20,-114,-2,1,-2,20,14,-24,-2,-18,-30,88,-26,-5,-26,9,-9,0,12,-7,-20,-10,42,-13,9,7,8, 61,-4,40,-82,11,-22,-90,13,-15,11,27,-17,4,19,47,-8,25,-28,0,21,4,-10,-23,54,48,10,-1,38,6,11,-25,-5, 10,-8,37,-6,7,-19,-50,1,9,12,53,-10,5,0,44,-24,103,35,-17,4,-13,-7,-20,47,62,31,14,8,11,19,18,15, 
  /* [2][0][][] */ 12,50,-17,16,-4,29,-14,-17,41,-12,-90,7,45,-17,-29,22,-1,2,-6,-16,2,-2,49,-89,3,-40,4,47,60,5,-6,7, 37,16,-24,17,0,-2,-3,12,24,-16,-85,2,21,6,4,24,6,7,12,-4,6,11,29,-69,25,-83,-13,32,62,2,-8,7, 48,36,3,5,-14,1,15,22,23,-28,-91,-8,38,1,9,19,53,28,0,24,-13,1,23,-100,46,-85,6,51,66,0,6,18, 
  /* [2][1][][] */ 36,33,17,41,-20,14,-19,-29,28,-25,-67,-15,69,43,33,-26,40,41,-15,46,-2,-28,48,-13,72,-3,2,73,71,-8,6,44, 39,45,13,83,-5,6,3,-15,32,-11,-80,-4,55,37,40,-17,32,37,-13,28,8,-29,-2,-50,28,-36,-11,23,33,-14,16,12, 58,36,38,71,-5,16,33,-15,70,-19,-77,-18,66,18,33,14,58,57,5,32,7,-20,27,-41,42,-15,-19,33,15,-5,-16,2, 
  /* [2][2][][] */ 73,32,58,127,-7,9,47,14,46,-17,-74,-3,101,50,22,54,8,110,13,60,6,-6,20,-62,50,28,-10,34,54,3,-5,3, 51,34,22,98,-9,1,22,7,47,-1,-67,15,121,45,32,18,35,89,8,56,-10,-3,27,-60,37,10,1,32,56,-8,6,2, 76,38,41,114,-21,12,38,-9,72,-24,-62,-10,111,33,53,-12,46,117,-7,51,2,-29,25,-59,27,2,-10,35,57,-7,-10,18, 
  /* [3][0][][] */ 26,23,9,-25,-5,19,-31,14,10,-6,17,18,46,7,27,-5,34,-57,9,28,-9,11,-27,-6,0,-55,-9,54,-54,-7,-4,36, 32,32,25,-13,-7,7,-18,-2,1,-9,2,6,33,-11,45,-7,48,-119,10,56,-13,9,-53,-1,7,-17,13,57,-64,-10,13,46, 8,8,26,-23,3,17,-2,15,7,-16,14,21,39,-11,56,-23,71,-42,17,52,16,13,-13,9,18,33,4,27,-79,-9,-1,71, 
  /* [3][1][][] */ 38,10,54,-48,-16,12,-54,-14,13,14,40,5,12,6,-9,7,11,-53,8,25,11,4,-56,22,-11,-115,-18,45,-74,16,-25,9, 19,34,28,-49,-18,-20,-127,-21,27,-5,33,2,43,10,16,-9,76,-90,-12,36,17,2,-85,66,31,-112,-19,36,-75,-16,-3,2, 37,10,49,-1,-20,-13,-67,-25,-18,-11,52,0,35,14,58,-20,85,-26,16,33,-11,-14,-21,95,49,16,11,40,-97,-18,-22,15, 
  /* [3][2][][] */ 23,8,38,-73,19,-16,-32,4,23,5,44,-10,11,29,19,16,23,-6,1,-1,-8,0,-15,-8,-11,-32,15,48,-15,18,-16,-13, 40,-1,27,-26,-3,2,-82,29,14,7,13,-14,34,23,9,8,9,-31,17,11,1,21,-6,27,17,-7,-19,10,-22,-6,-13,-8, 40,-3,38,7,1,12,-36,-6,-3,12,39,-2,38,16,30,-3,78,-5,-14,56,-3,-15,4,24,27,42,-10,33,-42,-7,-19,11, 
  /* [4][0][][] */ 0,3,23,4,5,-12,-83,-1,-16,-3,100,-2,-28,-14,29,20,10,-69,14,38,-9,15,-118,114,-1,79,-13,-21,-127,0,-12,-53, -1,14,31,10,6,19,-123,-27,17,-19,112,12,2,12,27,-25,-86,-114,3,24,-16,-9,-112,115,12,92,-19,27,-104,-10,-9,4, 41,38,72,41,9,0,-82,-20,23,-5,100,-15,57,41,40,-26,-80,-95,11,31,10,-8,-56,96,33,87,11,64,-66,-21,-19,37, 
  /* [4][1][][] */ 8,-7,11,-28,-5,-4,-33,34,-4,15,96,7,-37,10,-7,8,-14,-42,14,0,-9,7,-90,84,25,32,-4,26,-76,12,0,-36, 24,24,1,2,-12,15,-28,5,15,-1,87,-13,8,-1,3,18,-100,-95,-7,27,-9,10,-95,86,7,51,-22,32,-105,8,6,-15, 46,-1,47,35,-16,-29,-68,-14,34,-11,100,3,51,4,34,-22,-121,-113,16,12,-15,-19,-113,112,3,66,-5,27,-127,-19,-23,-5, 
  /* [4][2][][] */ 3,9,4,12,14,-6,-72,9,-4,-7,51,12,-23,48,21,7,15,20,-16,1,-17,26,-12,44,11,105,26,8,3,-10,22,-12, 11,25,31,50,19,24,-77,27,39,12,24,1,41,24,26,22,-68,-3,-15,-4,-16,-4,-20,38,15,80,-3,41,-10,9,11,11, 31,26,65,89,5,-11,-94,19,34,-7,45,-20,41,28,45,-2,11,1,-3,10,-5,11,-26,21,44,100,-12,42,-32,-5,-20,4, 
  /* [5][0][][] */ 19,-32,-51,-32,5,5,2,-14,-34,-13,-73,6,-20,-32,-11,-43,33,-78,6,-12,10,-6,-5,-19,-12,-61,13,25,-14,-6,-2,64, -16,-54,-76,-46,-10,10,-35,-49,-66,16,-100,11,-13,-97,49,-22,12,-83,2,33,-7,1,51,-59,14,-4,16,4,32,18,28,81, -27,12,-78,-2,-6,47,-57,-44,1,-1,-74,9,-35,-32,34,-45,15,-16,-11,31,-2,-22,83,-56,20,-40,23,47,57,28,13,84, 
  /* [5][1][][] */ 14,0,-1,-27,-5,-8,-18,-1,12,-19,88,-14,-3,-27,-7,-16,54,-84,-2,-47,-15,-3,-9,88,-6,64,-27,32,7,-20,-31,8, 17,-30,0,-38,6,-31,8,17,-42,-12,32,-10,-43,-4,32,-16,4,-78,-12,-18,-6,-8,33,60,51,80,-30,45,72,-12,-3,21, 2,-13,-3,-22,5,-18,17,41,-15,0,-35,7,-89,-27,29,40,40,-28,-9,-53,10,25,-26,13,70,-12,-19,11,71,0,9,13, 
  /* [5][2][][] */ -92,9,-11,-127,7,1,-48,8,-38,-9,27,9,-68,2,-19,18,50,-69,-14,-51,-7,1,31,77,-82,-61,-6,-39,-21,13,16,-4, -118,-44,-3,-118,-10,10,-2,18,-43,-4,-38,20,-89,8,26,65,46,-49,13,-41,3,15,7,4,-39,-49,21,-109,3,5,37,-38, -3,20,-41,19,18,28,34,18,38,16,-96,4,-94,12,-3,53,76,-13,2,-65,14,16,-21,55,-61,-86,23,-41,3,31,42,-26, 
  /* [6][0][][] */ 61,22,17,38,7,15,-20,19,22,-1,71,-12,27,16,19,-10,37,-89,-1,29,9,-3,-92,61,-15,43,-10,-1,-127,5,2,-9, 59,3,-4,4,0,1,-11,-8,-14,-3,89,-7,29,2,43,-18,17,-49,3,55,9,14,-25,82,22,85,-17,30,-122,10,-9,47, 27,2,6,8,10,4,-4,16,-17,9,62,-11,26,-3,25,-5,-84,-9,-10,38,9,12,30,80,27,76,13,21,-103,-19,-15,40, 
  /* [6][1][][] */ 17,16,32,-17,2,16,-51,-8,34,1,18,9,4,22,16,-7,5,-61,3,-14,-11,1,-61,3,19,-57,-12,45,-22,13,9,3, 41,12,29,-12,11,-4,-12,18,24,-5,50,-8,1,20,40,15,-10,-78,10,36,10,-10,-45,41,47,7,6,70,-13,-10,-20,22, 15,-19,43,0,2,-7,-18,6,-17,0,86,11,-2,11,9,-4,-89,8,-6,20,-11,8,-26,64,41,94,11,34,-39,-7,-13,6, 
  /* [6][2][][] */ 27,30,35,-2,-3,8,-121,-17,11,2,80,0,0,9,18,-12,40,-76,10,12,-3,-10,-74,42,25,-59,-6,41,-33,-6,2,7, 23,24,39,-12,4,-5,-95,-16,21,-4,82,-15,15,7,24,-8,14,-56,5,41,16,-17,-65,71,19,18,-7,55,-51,-2,-9,37, 22,5,58,-27,12,-5,-17,1,-22,-18,81,-18,13,-5,39,-31,-44,13,13,29,-5,-10,-38,85,34,55,-12,37,-72,-12,-5,22, 
  /* [7][0][][] */ 27,-13,52,-78,-4,13,25,25,9,-19,-34,-2,23,23,17,-2,37,-44,-10,24,7,7,-49,-42,5,-88,-19,64,-14,7,-11,27, 17,4,49,-98,3,-16,-35,4,2,-22,-14,6,16,7,16,-2,42,-121,16,27,8,-16,-84,32,-9,-81,-6,62,-66,-16,-20,29, 11,-13,60,-39,-6,-9,-14,-7,-21,-14,96,-11,7,-19,47,-26,110,-20,-11,34,12,-17,-55,91,10,26,-13,18,-127,-16,2,14, 
  /* [7][1][][] */ 34,20,27,-99,17,3,-71,16,24,-3,-123,-11,-6,33,-1,-4,38,-53,-14,10,4,16,-51,-43,-15,-113,-4,29,-50,13,1,10, 50,-18,42,-101,13,-8,-45,46,10,-8,-104,-10,8,39,0,7,19,-84,-4,19,6,26,10,-50,18,-119,-8,37,-29,-16,-22,12, 40,-7,35,-24,27,-14,-59,42,9,16,27,15,12,1,53,13,74,-13,12,57,11,29,30,-7,57,33,-4,32,-45,-5,-6,39, 
  /* [7][2][][] */ 28,25,39,-79,8,8,-76,-27,29,2,-9,-10,8,31,27,-19,60,-2,8,12,-15,-23,-14,-20,42,-41,22,77,18,-7,10,-3, 18,24,64,-48,6,-2,-92,-7,13,8,18,-4,-9,51,33,28,54,12,-9,-8,-4,-7,-39,0,44,-37,15,83,33,15,-1,-21, 8,-1,57,-9,-17,13,-2,-18,17,9,62,0,17,0,11,31,67,23,3,-4,-6,2,-13,20,53,20,2,48,29,13,-9,-28, 
  /* [8][0][][] */ 36,57,40,55,-16,24,27,-5,66,-11,94,17,74,18,38,10,-63,20,9,18,-3,-18,31,95,45,103,-8,51,68,-18,5,52, 20,-55,-17,-18,-4,-9,-4,-18,-33,-1,75,9,-6,-16,73,-26,-62,13,-12,40,-16,-29,2,71,57,78,15,-9,13,-13,-3,21, -12,-108,-60,-127,-24,-24,-18,-54,-58,-14,103,-9,-71,-34,-14,-15,-81,-29,9,-13,1,-27,6,91,24,57,16,-22,3,-5,13,7, 
  /* [8][1][][] */ 29,62,28,75,-17,3,2,-32,52,-3,63,3,83,39,21,-6,-78,65,10,51,15,-15,-33,23,2,57,-22,-6,17,10,16,-2, 18,-29,1,39,-17,-23,8,-48,10,-25,75,2,35,-14,53,-60,-70,61,6,21,1,-12,-4,2,41,96,-17,-12,-3,-8,24,-1, 46,3,5,70,-7,-20,-3,-14,9,-3,58,12,29,2,-8,-54,-78,80,6,-4,-7,-28,20,-16,18,107,-19,-9,58,7,-21,7, 
  /* [8][2][][] */ 87,72,34,111,7,44,22,4,54,-4,89,3,92,48,51,4,-49,70,-2,44,-8,0,9,51,72,84,-15,83,47,-5,-7,36, -9,14,7,19,7,-34,39,2,-38,-26,78,-16,23,-1,61,-23,-74,53,13,16,2,-8,-50,40,71,75,0,49,-15,2,15,-15, -23,-14,24,8,-15,-35,61,1,-86,10,81,-4,-18,20,-34,-13,-92,-1,-5,-56,5,9,-52,48,-12,78,-1,21,-16,-8,-1,-34, 
  /* [9][0][][] */ 0,7,15,43,12,13,-45,-8,16,17,80,-9,21,15,48,-17,-12,-22,13,12,5,-1,-88,69,0,84,13,2,-62,3,3,-49, 33,35,32,66,-7,16,-29,-8,24,-9,63,-1,61,30,68,-15,-1,-62,3,31,-5,11,-81,72,27,78,-13,0,-48,-9,7,8, 41,-4,9,23,-10,2,-29,-26,15,-1,69,-20,21,25,35,-48,-79,-48,8,13,11,-23,-65,57,36,80,10,25,-44,-2,-24,11, 
  /* [9][1][][] */ -1,16,19,37,21,-6,-14,15,27,5,98,9,7,-2,10,7,-39,-23,-8,12,1,4,-66,107,-16,62,4,-26,-99,11,6,-31, 44,16,14,58,-20,1,-85,-8,43,3,109,-15,39,-7,83,-4,-49,-121,5,15,6,-5,-109,110,3,77,-10,-15,-119,1,-15,-35, 14,28,8,40,-30,-21,-104,-41,13,-17,105,-15,10,-4,15,-53,-104,-127,-4,4,-10,-22,-119,117,-6,82,-21,-1,-108,-23,-23,-25, 
  /* [9][2][][] */ 10,21,15,29,12,4,-63,-3,28,10,52,-10,16,21,17,-5,1,22,7,2,14,7,-12,47,30,89,3,20,-3,8,1,-17, 41,30,50,92,13,3,-104,-22,30,-10,45,0,54,21,66,-7,-33,-22,6,29,-11,3,-15,33,39,81,10,35,-49,-6,-12,-9, 10,8,31,29,2,-10,-84,-15,26,-11,47,-24,39,5,30,-31,-42,-19,-9,12,7,4,-21,38,1,74,-8,-11,-72,-21,-20,-3, 
  /* [10][0][][] */ 50,35,56,78,9,-5,-17,20,63,3,62,6,82,36,47,-12,-21,3,-2,35,-7,5,-40,56,16,108,7,31,-62,-10,-10,15, 47,-21,28,22,-4,-25,-22,-3,-17,9,52,-12,47,8,84,-21,-38,-35,-11,62,4,2,-12,66,54,76,21,8,-50,-3,6,16, 19,-46,21,-66,-20,-33,-29,-26,-26,-15,50,7,-30,-3,6,-47,-82,-46,2,-2,5,1,-26,27,1,73,16,5,-25,4,-11,28, 
  /* [10][1][][] */ 40,40,66,58,9,29,-83,12,54,12,84,-4,27,53,18,5,-8,-41,12,41,-10,-9,-55,86,27,59,-6,49,-39,21,12,6, 21,-11,68,-1,-22,6,-67,-37,-3,-8,92,-2,23,0,76,-60,-59,-36,10,16,-10,-14,-85,71,25,98,9,10,-47,-18,-15,-18, -3,-33,17,-45,-22,-44,-110,-32,-24,-22,95,-6,-46,-24,-22,-97,-93,-52,-8,-5,-10,-21,-112,80,-48,55,-7,-23,-70,-29,-13,-49, 
  /* [10][2][][] */ 43,46,36,81,-12,29,-101,-4,40,-6,102,8,62,32,35,-24,-11,-26,16,70,1,19,-62,104,28,79,6,66,-51,2,6,19, 5,-3,30,7,9,-22,-68,4,-9,-3,99,14,31,-6,56,-40,-63,-38,11,30,-13,-14,-59,107,52,77,-15,4,-127,0,-12,22, -13,-24,-1,-51,-8,-10,-45,-13,-32,-1,99,-1,-17,-1,-26,-43,-78,-87,12,3,-10,4,-91,76,-36,81,-22,-6,-127,-8,-26,-10, 
  /* [11][0][][] */ 18,13,-9,-85,-7,11,-3,-4,7,14,-74,2,0,-19,16,20,43,-25,-18,33,17,-18,62,-63,-9,-127,-6,63,6,17,-1,70, 5,1,13,-91,-9,23,-2,-17,7,-11,-37,-3,8,-9,30,0,23,-122,-5,42,12,2,21,-38,1,-126,7,59,-1,-10,-11,64, -27,24,17,-8,12,21,-3,-5,20,7,13,-8,-3,-9,30,4,89,-31,11,16,-1,-5,-3,17,26,-25,30,61,-14,26,27,71, 
  /* [11][1][][] */ 59,25,26,-75,-12,7,15,12,22,-19,5,-17,-9,33,-9,7,30,-51,-18,3,0,4,-19,1,-6,-19,-16,66,16,-6,-36,9, 37,-19,17,-101,12,-20,-26,11,-32,-22,29,-21,11,10,11,-12,68,-101,-10,5,-22,-23,-33,43,35,-42,-8,60,-6,-7,-4,36, -7,-2,16,-27,13,-21,11,-9,-25,-12,76,-8,5,-17,57,-26,105,-13,2,31,-16,-5,-10,58,45,12,23,19,-25,9,20,24, 
  /* [11][2][][] */ 22,24,40,-106,25,-10,45,23,39,27,-50,-2,-6,47,2,20,25,-53,-3,-30,-20,27,-26,-58,-38,-103,-9,32,-4,29,-12,-45, 59,-18,23,-94,0,6,-23,36,-11,-7,-29,24,22,43,-21,-2,25,-45,-17,-11,-9,28,-5,-1,6,-99,-20,33,-2,-7,-19,-5, 35,19,40,-6,11,6,22,26,11,-13,-9,5,5,1,73,12,91,14,11,27,-12,13,-25,-12,62,-71,-10,2,-26,11,16,2, 
  /* [12][0][][] */ -10,7,-26,23,15,13,20,-3,-1,3,-78,0,-30,-11,-16,21,-3,25,-8,-56,-3,17,1,-44,-22,-35,5,-71,-3,14,-3,-84, -33,-7,-3,-12,10,4,-1,13,13,4,-123,6,-46,-12,-100,19,-59,86,15,-42,-1,7,13,-110,-56,-65,-1,-82,-23,-4,-10,-93, -11,17,-12,14,1,-5,-6,7,24,7,-66,5,-47,10,-100,6,-4,5,-4,-46,-14,22,-12,-127,-45,-37,-12,-13,10,15,11,-91, 
  /* [12][1][][] */ -28,10,-75,0,4,4,13,5,-1,16,-21,13,-33,-34,-21,-1,8,37,-2,-25,16,9,46,-11,-12,25,-9,-47,75,-1,-10,-21, -59,1,-84,-5,0,3,13,10,-27,12,-46,-17,-56,-53,-64,12,-62,65,7,-36,13,-5,80,-44,-11,-11,0,-56,69,-4,-6,-32, -5,12,-94,-5,-8,-1,-13,-11,13,6,-106,4,-67,-18,-68,-13,-19,-19,15,-37,-14,-2,-17,-47,-33,-32,13,-29,20,15,7,-64, 
  /* [12][2][][] */ -4,-3,-15,0,22,3,91,7,5,16,-11,15,-30,18,-36,3,13,10,-2,-35,-6,20,18,4,5,23,2,-15,18,8,14,-23, -5,-2,-48,5,3,6,123,0,-13,-7,-40,7,-28,-6,-48,18,-85,20,-5,-17,15,5,16,-28,23,-37,-3,-45,6,-2,2,-4, 3,-3,-51,14,12,-7,13,12,17,20,-29,-4,-40,7,-28,10,-42,-22,9,-31,1,5,12,-20,13,-29,16,-9,16,1,14,1, 
  /* [13][0][][] */ 51,-1,6,-40,-10,-16,-9,-2,-14,-10,46,-9,29,6,50,-15,84,-106,-9,56,-1,6,-51,23,28,-26,6,25,-103,-4,12,27, 32,5,11,-59,2,19,-14,14,19,-15,42,-8,4,0,81,3,74,-92,-2,43,-4,9,-15,22,24,-22,-2,3,-124,3,13,16, 5,6,17,-4,10,15,-18,5,-3,-6,65,22,46,-2,12,-6,49,-22,-7,39,11,-12,11,55,-23,57,10,5,-127,8,1,37, 
  /* [13][1][][] */ 42,6,39,-59,-5,7,-92,14,13,3,-9,2,6,10,48,-19,62,-61,11,22,4,-12,-47,-2,10,-108,8,34,-11,12,-13,4, 45,17,11,-41,-1,-2,-75,16,9,-7,-3,1,-6,33,66,-4,50,-30,15,9,-10,17,-19,4,78,-111,-7,65,-1,13,6,16, 16,-3,23,-14,14,15,-15,-3,13,6,50,-8,25,-13,-9,19,39,0,14,-15,-5,-7,-37,27,51,18,-9,47,-11,-12,-6,-28, 
  /* [13][2][][] */ 45,12,25,-60,-20,16,-83,-10,4,-7,19,14,7,0,55,2,83,-49,-12,3,8,-15,-33,37,21,-72,-7,74,0,0,-14,13, 34,-2,8,-76,-19,-2,-108,-6,4,8,38,-6,-6,-10,50,6,66,-91,10,28,8,-6,-22,56,50,-69,6,38,-5,15,-7,15, 1,-15,23,3,6,-9,-60,-25,-6,3,34,-8,-2,-10,1,-26,79,4,-10,-3,-11,9,-21,35,15,19,9,38,-37,7,2,-10, 
  /* [14][0][][] */ 67,52,20,78,1,36,-3,5,63,9,31,10,82,18,5,14,-6,44,10,27,-2,26,-35,37,-24,88,11,-7,-121,1,20,-32, 14,15,28,2,-11,-19,-7,9,14,8,48,26,83,-15,88,-12,-17,-22,-1,64,-3,-7,-24,57,58,97,14,-17,-85,-19,-11,11, 32,-5,22,-13,6,-10,-16,-22,3,-1,10,8,21,-20,0,-28,-79,-82,-6,17,9,-2,-89,16,-2,67,-3,0,-74,-2,-29,-16, 
  /* [14][1][][] */ 50,70,53,76,26,40,-60,13,83,11,82,20,41,57,18,50,-13,20,14,39,5,28,13,73,22,52,6,66,29,27,25,15, -7,14,77,-15,-1,18,-1,-15,15,-23,77,13,68,22,58,-9,-13,-42,13,28,8,-16,-33,51,76,83,8,24,-15,-13,9,-11, -17,-22,1,-47,-24,15,-127,-36,27,-11,21,-15,34,-22,-24,-77,-81,-92,6,-16,1,-7,-60,67,-13,39,-28,-16,-78,2,-8,-32, 
  /* [14][2][][] */ 8,48,35,93,-16,9,-76,-43,66,-19,114,0,37,26,5,4,16,8,-3,31,13,-25,-73,118,42,53,20,52,-72,18,-12,-12, -34,3,47,-14,-31,-9,-81,-31,6,-20,112,17,58,0,47,-58,18,-12,1,17,-1,-22,-61,121,46,65,-12,11,-115,-10,-7,-35, -20,15,10,-25,-20,19,-65,-10,30,-17,63,-15,18,-13,-10,-17,-89,-74,-9,16,1,-4,-96,126,-37,44,-29,12,-95,-6,-39,10, 
  /* [15][0][][] */ 41,49,34,54,-33,6,-22,-25,15,-19,-90,-25,100,39,41,-4,77,81,7,28,-6,-21,55,-87,4,-3,-12,23,35,-28,-18,33, 36,54,27,31,-21,19,28,32,11,-39,-93,-29,68,34,20,10,51,66,2,33,6,-17,8,-98,16,-52,-4,20,47,-26,-30,7, 77,62,54,40,-1,20,72,64,62,-42,-95,-13,92,43,23,37,66,52,3,42,2,7,39,-91,43,11,-25,51,29,-40,-31,21, 
  /* [15][1][][] */ 43,-8,47,100,-24,-32,40,-3,-7,-8,11,-20,71,47,63,26,106,117,17,46,-7,-14,84,-24,49,25,-16,63,80,-11,-3,21, 49,38,36,127,-23,-33,25,-3,-6,-16,15,0,59,21,20,2,121,86,-18,49,-1,-4,24,24,24,22,-25,33,25,-21,9,10, 34,40,52,83,-1,-10,34,-21,60,-23,-31,-3,90,37,27,14,116,61,-13,57,-3,-16,37,21,0,20,-28,-7,19,13,-3,21, 
  /* [15][2][][] */ 92,-19,61,105,10,-20,112,27,29,-21,-123,-10,58,46,29,73,79,58,18,15,8,-13,-46,-124,17,-87,-24,-19,-31,2,-16,-17, 60,18,38,83,-4,7,64,8,50,-34,-120,-2,69,23,7,39,74,70,0,14,-9,-11,6,-113,21,-101,2,-4,25,2,-14,8, 94,35,62,68,-3,19,64,-1,104,-6,-118,1,86,42,44,54,78,81,-11,64,-4,10,89,-123,47,-38,10,22,29,-13,-9,21, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,3,3,32 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0067255338653922081, 0.0062706014141440392, 0.0074354088865220547, 0.0065479096956551075, 0.0067351581528782845, 0.0074752080254256725, 0.0075052501633763313, 0.006725262850522995, 0.0068895351141691208, 0.0072860540822148323, 0.0068152924068272114, 0.0060410634614527225, 0.0073028961196541786, 0.007523790467530489, 0.0069529726170003414, 0.0064552170224487782, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<4, int> tensor_dimension8 = { 4, { 1,28,28,32 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0035411275457590818, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,14,14,32 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0035411275457590818, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,14,14,16 } };
const TfArray<1, float> quant10_scale = { 1, { 0.014788983389735222, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant11_scale = { 1, { 0.014788983389735222, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,784 } };
const TfArray<1, float> quant12_scale = { 1, { 0.014788983389735222, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,4 } };
const TfArray<1, float> quant13_scale = { 1, { 0.79330801963806152, } };
const TfArray<1, int> quant13_zero = { 1, { 74 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,4 } };
const TfArray<1, float> quant14_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,6,2 } };
const TfArray<1, int> outputs0 = { 1, { 8 } };
const TfLitePoolParams opdata1 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs1 = { 1, { 8 } };
const TfArray<1, int> outputs1 = { 1, { 9 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 9,7,3 } };
const TfArray<1, int> outputs2 = { 1, { 10 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 10 } };
const TfArray<1, int> outputs3 = { 1, { 11 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 11,1 } };
const TfArray<1, int> outputs4 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 12,5,4 } };
const TfArray<1, int> outputs5 = { 1, { 13 } };
const TfLiteSoftmaxParams opdata6 = { 1 };
const TfArray<1, int> inputs6 = { 1, { 13 } };
const TfArray<1, int> outputs6 = { 1, { 14 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25088, (TfLiteIntArray*)&tensor_dimension0, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 25088, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25088, (TfLiteIntArray*)&tensor_dimension9, 6272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension11, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension13, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 15;
  for(size_t i = 0; i < 15; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 7; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 7; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  14, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 7; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
