/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 08.12.2021 22:08:07

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 33280;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[15];
TfLiteEvalTensor tflEvalTensors[15];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[7];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,28,28,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 784, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[32] = { 29219, -21588, 31316, 21571, -12256, -20427, -1345, -29003, -16923, -20256, -275, -32574, 33703, 21081, 27784, -33069, 31584, 55276, 0, 24445, -4699, -26330, 32473, 26608, 11965, -1885, -20426, 21441, 60039, -39305, -27604, 26126, };
const TfArray<1, int> tensor_dimension2 = { 1, { 32 } };
const TfArray<32, float> quant2_scale = { 32, { 4.2870615288848057e-06, 5.4052075029176194e-06, 4.2142573875025846e-06, 6.7904720708611421e-06, 5.2167888497933745e-06, 7.466890565410722e-06, 8.1268663052469492e-06, 5.9262974900775589e-06, 6.8508747972373385e-06, 5.9412150221760385e-06, 3.4541340028226841e-06, 4.0382519728154875e-06, 3.8742077776987571e-06, 4.9027516979549546e-06, 4.6281857066787779e-06, 5.2870786930725444e-06, 5.7231131904700305e-06, 3.6196190649206983e-06, 4.108683697268134e-06, 4.7674334382463712e-06, 3.5368461794860195e-06, 6.5352760429959744e-06, 7.1013027991284616e-06, 5.1381643970671576e-06, 5.5341265579045285e-06, 4.0956292650662363e-06, 7.3935339059971739e-06, 5.4146403272170573e-06, 4.9905329433386214e-06, 3.9692413338343613e-06, 6.5265617195109371e-06, 4.6869845391483977e-06, } };
const TfArray<32, int> quant2_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[16] = { -198, 812, -3514, -3386, 2547, -952, 3040, 5399, 5563, 3246, 5359, 3699, -4273, 994, -1434, 4794, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 2.0148865587543696e-05, 2.386936466791667e-05, 2.4566403226344846e-05, 2.3434320610249415e-05, 1.4346488569572102e-05, 2.4663251679157838e-05, 1.9800743757514283e-05, 1.515648364147637e-05, 1.7208323697559536e-05, 1.9104192688246258e-05, 2.4574455892434344e-05, 2.226796823379118e-05, 2.1114852643222548e-05, 1.9218861780245788e-05, 2.3127533495426178e-05, 2.1942911189398728e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[4] = { 845, 1161, -1193, -324, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const TfArray<1, float> quant4_scale = { 1, { 6.0162925365148112e-05, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[4*784] = { 
  7, 11, -2, 26, 9, 19, -1, 14, 6, -29, 2, -6, 7, 31, -3, 4, 21, 4, 1, 28, -6, -5, -53, 28, -66, -27, -30, -27, 21, -22, -32, -23, 11, 16, 10, 22, -8, -18, -51, 11, -78, -45, -61, -15, 11, -51, -57, -33, 19, 27, -2, 34, 5, -4, -61, 3, -68, -57, -59, -33, 21, -44, -45, -16, 13, 17, 8, 24, 15, 9, -40, 17, -89, -33, -51, -36, 22, -37, -47, -16, 10, 19, -9, 12, -10, 0, -61, 27, -58, -49, -57, -10, 5, -44, -54, -30, -5, 5, 14, 22, 23, -8, -29, 0, 6, 26, -11, -11, 4, -10, -8, 10, 27, 11, -40, 24, -55, 11, -2, 5, -78, -59, -23, -57, 8, 12, -46, -24, -18, -19, -32, 30, -84, -22, -69, -54, -70, -73, -70, -59, 7, -67, -61, -57, -33, -24, -42, 16, -77, 5, -58, -81, -109, -72, -67, -60, 9, -75, -45, -76, -43, -43, -21, 21, -68, -9, -64, -81, -104, -62, -67, -62, 14, -62, -58, -58, -35, -22, -26, 15, -76, -5, -71, -59, -77, -50, -54, -62, 25, -83, -41, -47, -38, -39, 0, 28, -62, -3, -44, -75, -65, -52, -51, -77, 27, -66, -41, -47, -33, -55, -8, 15, 22, -2, -39, -54, -92, 12, -4, -82, 24, -82, -28, -23, 19, -16, -66, 24, -75, 22, 15, -14, -96, -49, -44, -48, 34, 22, -58, -61, -57, -42, -23, 17, -85, -35, -57, -85, -106, -64, -52, -93, 14, -73, -53, -69, -35, -45, -32, 37, -87, -27, -72, -59, -113, -71, -52, -89, 32, -69, -47, -74, -46, -55, -29, 24, -61, -19, -47, -78, -115, -68, -59, -73, 35, -72, -42, -55, -55, -60, -13, 18, -81, -44, -46, -69, -92, -73, -65, -67, 38, -87, -44, -68, -48, -41, -20, 28, -96, -34, -59, -83, -96, -57, -54, -91, 11, -63, -50, -53, -42, -52, 1, 33, 14, -35, -47, -63, -117, 2, -15, -82, 34, -51, -24, -20, 34, -10, -63, 46, -65, 21, 12, -20, -90, -48, -34, -80, 28, 9, -44, -57, -58, -70, -17, 29, -79, -26, -59, -86, -83, -49, -74, -93, 26, -67, -83, -35, -55, -62, -27, 37, -77, -31, -59, -75, -61, -58, -60, -91, 37, -86, -79, -62, -62, -64, 2, 49, -65, -28, -49, -63, -79, -84, -58, -84, 30, -79, -69, -50, -65, -72, -28, 30, -88, -47, -65, -84, -77, -72, -46, -80, 21, -65, -55, -54, -52, -48, -7, 36, -92, -45, -71, -67, -93, -73, -58, -50, 30, -81, -57, -40, -37, -65, 1, 33, 23, -11, -53, -68, -127, 11, -17, -55, 13, -55, -24, -6, 13, -15, -61, 55, -53, 21, -9, -33, -96, -57, -30, -53, 16, 29, -67, -43, -38, -44, -24, 35, -69, -47, -58, -65, -46, -51, -53, -90, 33, -78, -84, -59, -56, -66, -2, 27, -70, -27, -73, -82, -57, -61, -69, -57, 14, -92, -69, -42, -66, -48, -27, 53, -68, -44, -88, -81, -60, -55, -81, -74, 16, -64, -74, -58, -59, -59, -25, 54, -72, -28, -90, -65, -93, -73, -71, -93, 42, -101, -81, -35, -56, -63, 4, 37, -71, -36, -59, -47, -64, -54, -70, -61, 40, -78, -75, -54, -43, -36, 15, 34, 0, -25, -50, -36, -103, 22, -29, -42, 37, -62, -28, -6, 30, -13, -71, 33, -59, 17, -5, -20, -113, -62, -25, -74, 35, 25, -44, -48, -71, -72, -29, 32, -75, -45, -85, -64, -59, -80, -74, -72, 18, -84, -81, -72, -52, -52, -27, 48, -71, -26, -95, -53, -78, -88, -86, -96, 37, -100, -83, -67, -60, -71, -13, 12, -79, -52, -55, -66, -83, -75, -79, -63, 29, -78, -54, -55, -54, -72, -28, 30, -71, -47, -77, -79, -61, -77, -67, -90, 28, -88, -54, -60, -51, -59, -2, 24, -96, -25, -80, -76, -79, -101, -72, -100, 16, -82, -78, -49, -60, -62, -16, 33, 8, -23, -49, -44, -126, 8, -23, -67, 31, -73, -13, -4, 20, -25, -15, 54, -49, 13, 13, -19, 1, -53, 10, -13, 18, 26, 28, -21, -28, -92, -54, 44, -71, -7, 7, -80, -81, -75, 9, -46, 34, 9, 7, -75, -9, -68, -44, 39, -73, -31, 22, -73, -65, -53, -3, -49, 21, 16, 13, -52, -22, -65, -17, 13, -67, -9, 1, -50, -80, -72, 17, -20, 10, 5, 29, -62, 1, -57, -48, 18, -75, 1, -3, -60, -88, -81, 5, -30, 18, -1, 31, -87, -1, -98, -58, 54, -85, 8, -6, -72, -99, -77, 10, -63, 18, 8, 12, -87, -11, -94, 15, 53, 13, -25, 17, -59, -43, 6, 21, -41, 39, -2, 28, -25, 
  2, -7, 38, 16, 13, 9, 12, -4, 3, 35, -11, -7, -2, 20, 15, 2, -21, -2, 60, 3, -3, -40, 6, -1, 24, 20, 10, 4, 0, -8, 13, -1, 15, -8, 18, 4, 1, -26, 27, -5, 20, 33, 25, 21, -12, 31, 29, 17, 3, 11, 39, -4, 10, -55, 17, 14, 22, 23, 22, 15, 1, 33, 15, 10, 5, 8, 49, -2, -5, -11, 20, 4, 44, 11, 34, 19, 6, 31, 25, 6, 22, 17, 65, 14, -37, -7, 12, 7, 36, 1, -1, 3, 1, 19, 7, -6, 40, -1, 27, 7, 10, 28, 9, 16, -5, 1, -10, -12, 3, 1, 12, -17, 1, -4, 28, 8, 28, 6, 11, 6, 2, 38, 5, 4, 25, 10, 28, 5, -37, -3, -25, 3, 9, -62, 18, -2, -10, 10, 24, 14, 2, 3, 16, 9, -36, -15, -45, -15, 8, -37, 22, 30, -29, 20, 30, 22, -13, 31, 29, 1, -32, -8, -46, -30, -10, -52, 40, 21, -22, 19, 45, 20, -24, 47, 22, -7, 11, -19, -46, -10, -10, -42, 27, 31, -6, -15, 24, 5, -16, 38, -1, 11, -1, 6, -41, -7, -6, -38, 34, 19, 29, -1, 19, 6, -5, 20, -5, 13, 8, -1, 17, 16, -12, 14, 17, -2, 7, 0, -6, 21, -2, 29, -6, -11, 1, -3, 16, -11, 25, 3, 2, 16, 17, 38, 14, 17, -9, -4, 3, 15, -33, -8, -46, -22, 14, -68, 13, 10, -8, 28, 26, 0, -16, -9, 23, 22, -62, -18, -41, -37, 21, -42, 3, 20, -8, 30, 33, 18, -21, -12, 7, 7, -19, -14, -60, -67, 17, -28, 24, 22, -23, 22, 23, 29, -56, 4, -1, 30, -1, 12, -33, -52, -9, -31, 26, 6, 9, -5, 30, 9, -24, 19, -3, 19, 13, 5, -36, -19, -16, -16, 26, 15, 0, 12, 12, 3, -27, -1, -16, 3, 14, -2, 2, 11, 0, 26, -14, 21, 1, -3, -5, -10, -1, -6, -13, 8, -10, -49, 1, -2, 24, -11, -15, -20, 10, 4, -6, -23, 12, 8, -5, 6, -56, -35, -15, -16, 13, -103, 5, -3, 24, 36, 21, 5, -20, -14, 10, 8, -50, -23, -20, -63, 7, -81, 11, 6, 14, 6, 17, 20, -45, -8, -3, 3, -27, -6, -34, -94, 11, -61, 14, 21, 20, 9, 33, 8, -63, -9, -22, 10, 27, -3, -22, -82, -2, -28, 27, 1, 24, -5, 21, 3, -57, 4, -35, 17, 16, -1, -42, -16, -26, -20, 16, 0, 16, -16, 16, 12, -24, -8, -47, 19, 30, -1, 7, 10, -12, 17, -12, -17, 3, -16, -8, -8, -3, -8, -33, 12, -11, -15, 14, -1, 30, -2, -24, 14, 6, 14, 7, -1, -9, 2, -7, 17, -47, -39, 7, -14, 23, -69, -7, 9, 52, 9, 20, 15, -7, -54, -2, 28, -31, -25, -4, -35, 25, -81, 15, -1, 28, 10, 13, -7, -24, -25, -8, 20, 1, -17, 1, -49, 7, -18, 20, 17, 27, 16, 20, 8, -41, -12, -22, 21, 31, 4, -1, -20, -18, -5, 1, 12, 40, -17, 13, 8, -21, -19, -42, 14, 30, -4, -5, -11, -4, -16, 13, 18, 35, -16, 23, -10, -13, -17, -50, 8, 21, -18, 13, 14, -1, 6, 4, -7, 28, 4, 0, 7, -6, -14, -27, 6, -3, -7, -3, -10, 24, 2, 4, 13, 7, 19, 15, -14, -1, -6, -5, 32, -93, -32, 45, 4, 28, -68, -37, 5, 59, 5, 6, -14, -2, -48, -27, 15, -61, -23, 21, -3, 45, -44, -17, 28, 31, 16, 31, 18, -6, -36, -31, 43, 35, -4, 9, -17, 25, -3, -2, 47, 39, 9, 27, 24, -13, 1, -29, 36, 41, 0, 21, 7, 13, -5, -9, 43, 35, -4, 25, 7, -11, 0, -28, 27, 24, -3, 18, -5, -19, -10, -5, 1, 44, -28, 3, -1, -4, 6, -40, 10, 26, 6, 6, 0, 1, 11, -5, 16, 20, 0, -9, 5, 5, -12, -28, 6, 7, -18, -2, 18, 7, 10, 1, 7, -5, 7, 4, -26, 17, 16, -4, 17, -59, 13, 22, 14, 28, -52, -17, 4, 10, 31, 11, -4, 14, 14, 0, 32, -9, 16, 33, 2, 23, -33, -5, 20, 32, 35, 20, 3, -1, 9, -3, 42, 19, 32, 26, 4, 28, -31, 7, 31, 34, 14, 17, -2, 1, 12, -12, 43, -2, 48, 25, -4, 11, -32, 0, 39, 28, 10, 22, -1, 6, 4, -2, 23, 18, 19, 6, -3, -1, -19, 19, 10, 13, -4, -1, -6, 3, 18, -5, 14, 62, -2, 4, 15, 1, 16, 9, 13, -5, -6, -12, -38, 9, 23, 11, 3, 
  -19, -18, -21, -7, -3, -8, -4, -12, 14, 3, 30, 18, -29, -23, 9, 25, 13, -13, -73, -9, -2, 54, 14, -4, -13, 13, 22, 20, -20, 42, 5, 33, -22, -25, -45, 6, 0, 51, 12, -17, -2, 17, 8, 1, -18, -4, 9, 27, 10, 5, -52, -2, 19, 87, 14, -9, 2, 43, 3, 11, -4, 22, 13, 19, -18, -8, -45, -6, 12, 21, 23, -7, -21, 33, 27, 21, -1, 37, 22, 1, -23, -14, -53, 1, 6, 4, 20, -14, -2, 36, 20, 15, -5, 21, 35, 22, -39, -22, -7, -19, -9, -18, 36, -2, 13, -4, 14, 41, -18, -9, 20, 13, -17, 0, 12, -21, 8, -14, -8, 26, 6, 12, 14, -3, -6, -17, 14, 11, 64, 36, 44, -15, 26, 41, 10, 35, -8, 14, 7, 21, -13, 26, 18, 17, 88, 33, 13, 6, 18, 88, -6, 33, -20, 5, -10, 9, -1, 17, 23, -15, 70, 10, -2, 16, 15, 60, 6, -3, -21, 23, -7, -3, -5, 9, -13, -6, 26, 12, 12, -3, 54, 57, 4, 19, -26, 41, 0, 5, -7, -7, 2, 16, 24, 28, 52, -16, 47, 51, 27, 30, 7, 47, 17, 20, -12, 2, 18, 24, -4, 18, -9, -8, -19, -8, 34, 21, 5, -6, 8, 42, -23, 0, -2, 4, -19, -2, 21, -19, -22, -15, 23, 16, 22, 21, 22, 20, -28, -23, 17, 13, 91, 28, 33, -6, -2, 54, 27, 23, -27, 2, 3, 7, -18, 25, 21, 5, 104, 42, 6, 26, -7, 67, 9, 21, -47, 5, -15, 18, 4, 14, 7, 0, 43, -3, 2, 23, 9, 50, -5, 4, -63, -5, -22, 3, 7, 17, 9, -6, 28, 24, 34, 5, 58, 39, 0, 4, -30, 32, -7, 3, 15, 17, 26, -7, 14, 28, 27, -16, 48, 24, 30, 13, -19, 53, 7, 12, -18, 12, 37, 13, -21, 20, 4, -35, -5, -41, 62, 8, 21, -21, 15, 32, -18, 24, 24, 12, -10, 30, -1, -46, 5, -17, 14, 11, 26, 18, 14, 29, -34, -22, -1, 13, 123, 56, -1, -17, -3, 110, 34, 37, -39, 16, -9, 33, -14, 61, 18, -5, 71, 48, -5, 7, -11, 72, 26, 17, -53, -5, -9, 27, 5, 34, 19, -28, 44, 25, -21, 41, -21, 72, 5, 7, -76, 20, -11, -3, 10, 26, 9, -31, 37, 24, -11, -5, 20, 64, 13, 15, -53, 36, 0, 21, 7, 10, 37, -15, 3, 6, 10, -13, 36, 16, 9, 14, -21, 49, 11, 30, -23, 9, 37, 12, -12, 26, 2, -48, -6, -1, 34, 49, 21, -19, 22, 43, -32, 6, 38, 29, -17, 23, -13, -27, 7, -10, 2, 23, 10, 8, 9, 20, -42, -7, -9, 2, 106, 29, -37, -27, -2, 80, 52, 19, -44, 14, 12, 43, -15, 67, 30, -15, 82, 33, -59, 1, 5, 79, 21, 8, -66, 16, 3, 20, 4, 50, 25, -10, 19, 12, -41, 14, 6, 63, 0, -7, -77, 23, -11, 6, -2, 12, 12, -18, 28, 31, -34, -2, 21, 44, 21, 4, -68, 38, 8, 31, -3, 21, 51, -14, 30, 41, -15, -33, 58, 35, 39, 18, -28, 56, 26, 19, -23, 37, 55, 15, 16, 29, -32, -37, -6, 2, 26, 46, -2, -1, 8, 28, -23, 2, 11, -1, -12, 6, -23, -24, -1, -11, 9, 14, -4, -5, 1, 33, -21, -27, 15, 11, 102, 29, -111, -12, 9, 73, 38, 18, -61, 11, 14, 27, -8, 66, 22, -10, 92, 27, -121, -8, -2, 63, 36, 19, -81, 8, 23, 30, -13, 69, 41, -3, -1, 23, -103, -2, 6, 46, 16, 15, -84, 24, -6, 31, -6, 44, 36, -16, 18, 32, -98, -8, 17, 51, 20, 14, -90, 36, 18, 37, -17, 32, 43, -21, 3, 24, -77, -22, 21, 27, 42, 23, -50, 57, 24, 32, -7, 43, 41, -2, -2, 30, -22, -40, -14, -6, 28, 16, -21, 3, 3, 32, -12, 19, 22, -8, -8, 27, 1, -28, -6, -22, -14, 11, 2, 11, -13, 28, -20, -5, -19, 15, 45, 32, 20, -13, -9, 30, -1, 25, 11, 20, -9, 33, -14, 9, -7, -2, 10, -2, 3, -20, -5, 18, -9, -14, -14, 37, -7, 27, -11, -2, -7, 17, 19, 15, 1, -24, 15, 40, 4, 2, -16, 14, 2, 29, -12, 3, -16, 3, 40, 8, 2, -12, -11, 61, -10, 7, -22, 12, -6, 15, -13, -1, -12, -1, -16, 3, 1, -30, 37, -5, -10, -2, -4, 56, -16, 16, -18, -12, -13, 7, -55, 42, -3, -37, -6, -31, -11, 22, 28, -12, -6, 45, -25, -12, 4, 8, 
  -9, 17, -28, 3, -1, 6, 6, -14, -18, -67, -42, -47, -1, 4, -48, -6, -1, 13, -7, -4, 17, 18, -44, 7, -28, -46, -60, -15, -6, -28, -59, -36, 4, -12, 10, 8, -33, -46, -50, -2, -65, -90, -62, -37, -14, -40, -33, -61, 0, -10, 19, 2, -24, -92, -78, 3, -99, -111, -74, -41, 5, -53, -48, -61, 1, 18, -12, 2, 7, 5, -75, -3, -66, -43, -80, -62, 5, -74, -53, -52, 19, 29, -6, 9, 9, 41, -54, 1, -48, -37, -64, -24, 2, -34, -35, -40, 18, 1, -21, -6, -5, 29, -49, 12, -33, -2, -14, -40, -1, -24, -22, -11, 5, 19, -8, -1, -8, 0, -26, -13, -32, -14, -37, -20, 9, -5, -35, -20, -20, -5, 35, 5, -27, -5, -23, -37, 28, -40, -39, -20, -10, -33, -38, -9, -91, -24, 42, 6, -18, -71, -31, -41, 62, -26, -14, -17, -7, -38, -19, 26, -24, -3, 87, 1, -21, -43, -9, -35, 70, -17, -11, -4, -8, -11, -19, 20, 17, -19, 52, 8, -55, 13, -27, -46, 24, -54, -30, -17, -4, -27, -24, 5, -13, -25, 3, 0, -16, -2, -40, -10, -26, -26, -62, -23, -1, -47, -3, -31, 37, -22, -20, 9, -3, 1, -50, -40, -38, 8, -30, -40, 3, -60, -19, -2, 14, -32, -1, 24, -2, 4, -7, -10, -40, -41, -21, -40, 1, 5, -4, -26, -93, -38, 31, 14, -2, -26, -13, -26, 13, -35, -4, -16, -5, -6, -8, 0, -53, -18, 59, 27, 5, -39, -16, -10, 70, -22, 19, -8, 18, -30, 0, 30, 7, -13, 54, 23, 10, -20, -6, -2, 58, -9, 4, 0, 17, 9, 9, 16, -17, -11, 58, 11, -21, -28, 1, 10, 55, -31, 20, -4, 22, 3, 21, 12, 9, -37, 38, 11, -55, -5, -10, -17, -2, -31, -16, -31, 2, -17, -11, -29, 1, -12, -23, 25, -2, 42, -30, -23, -57, -14, -19, -51, 20, -11, -17, -26, 18, -11, -1, 26, -5, 5, 15, -24, -27, -20, -22, -15, 27, 24, 6, -3, -122, -2, 71, 28, -3, -22, -15, -8, 27, -2, -12, -3, 16, -26, 1, 2, -43, -15, 85, 28, 23, -4, -1, -3, 50, -2, 18, 5, 23, -6, 5, 41, -32, 4, 93, 46, 14, -30, 11, 16, 72, -8, 21, 10, 36, -8, 2, 37, -26, -6, 90, 27, 5, -34, 2, 13, 58, -11, 2, -16, 37, -23, 4, 18, -15, -10, 56, 32, -8, -23, 13, -8, 15, -36, -9, 7, 21, 0, -4, 14, -25, -20, 11, 49, -8, -28, -21, -39, -47, -5, -10, -21, 35, 1, -1, -9, -1, 5, 5, 27, -4, 11, 1, -2, -22, -8, -1, -11, 7, 11, 23, -3, -92, -21, 58, 18, -9, -13, -9, -19, 11, -19, -18, -18, 22, -28, 5, 7, -63, 2, 66, 26, 15, -1, -14, -17, 48, -4, 6, -4, 12, -27, 12, 35, -27, -6, 90, 43, 20, -14, 8, -7, 61, -2, -2, -11, 18, -18, 9, 32, -40, -17, 70, 55, -2, -29, -15, -13, 45, -16, -10, -7, 36, -14, 0, 22, -34, -23, 33, 20, -15, -42, -6, -2, 1, -24, -5, -32, 29, -22, -5, -3, -6, -11, 7, 15, -15, 26, 0, -14, -55, 1, -8, -25, 20, 3, 11, -13, 5, 0, 11, -2, -5, 4, 4, -6, -36, -14, -20, -19, 4, -8, 29, -5, -68, -15, 94, 7, -21, 1, -4, -11, 37, -23, -1, -15, -1, -36, 1, 1, -14, -36, 97, 17, -23, -15, -34, -20, 56, -30, -29, -23, 2, -40, -7, 3, -51, -4, 86, 24, -19, -26, -29, -15, 60, -30, -11, -13, 3, -48, 3, 4, -54, -19, 82, 19, 1, -40, -7, -32, 53, -25, -25, -6, 1, -34, 2, 0, -22, -11, 95, 10, -6, -32, -13, -28, 26, -20, -25, -19, 15, -19, 2, 8, 4, -7, 28, 4, 7, 12, 0, -25, -21, 6, -21, 6, 14, -1, 3, -3, 4, -31, -7, 12, -3, 14, 11, -12, -5, -16, -3, -33, 19, 12, 4, -4, 4, -18, -21, 15, 4, 41, 3, -11, -32, -16, -15, -13, 7, -4, 1, -6, 7, -6, -31, 19, -40, 24, -8, -34, -17, -45, -7, -14, 7, -4, 0, -41, -25, -81, -51, 20, -68, -24, 8, -47, -21, -75, -6, -48, 25, 0, -9, -40, -46, -51, -43, 14, -32, -17, -12, -38, -5, -26, 11, -22, 11, -1, 3, -44, 14, -46, -44, 15, -51, 43, -2, -30, -15, -56, -8, -24, 12, -3, -2, -38, 19, -73, -4, 29, -6, 18, 17, -31, -16, 1, -6, -46, 21, 18, 9, -14, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 4,784 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0051271365955471992, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[32*3*3*1] = { 
  /* [0][0][][] */ -80, 96, 97, 
  /* [0][1][][] */ -26, -75, -127, 
  /* [0][2][][] */ 104, -19, -91, 
  /* [1][0][][] */ 44, 45, -7, 
  /* [1][1][][] */ 127, 12, -79, 
  /* [1][2][][] */ 101, -59, 10, 
  /* [2][0][][] */ 10, -127, -24, 
  /* [2][1][][] */ 92, 45, -78, 
  /* [2][2][][] */ -42, -104, 99, 
  /* [3][0][][] */ -87, 127, -61, 
  /* [3][1][][] */ 0, 34, -62, 
  /* [3][2][][] */ 59, -41, -77, 
  /* [4][0][][] */ -16, 67, -127, 
  /* [4][1][][] */ 10, 7, 4, 
  /* [4][2][][] */ 66, 118, 115, 
  /* [5][0][][] */ 70, 40, 65, 
  /* [5][1][][] */ 104, 63, 12, 
  /* [5][2][][] */ -37, -91, -127, 
  /* [6][0][][] */ -127, -111, -123, 
  /* [6][1][][] */ 50, 63, 6, 
  /* [6][2][][] */ 26, 110, 46, 
  /* [7][0][][] */ -92, -6, -56, 
  /* [7][1][][] */ 24, -42, 82, 
  /* [7][2][][] */ 124, 127, 83, 
  /* [8][0][][] */ 70, -29, -62, 
  /* [8][1][][] */ 127, 0, -7, 
  /* [8][2][][] */ 117, -44, -66, 
  /* [9][0][][] */ 28, 36, 95, 
  /* [9][1][][] */ 86, 67, 92, 
  /* [9][2][][] */ 100, 127, -4, 
  /* [10][0][][] */ -127, -125, -75, 
  /* [10][1][][] */ 45, -5, 22, 
  /* [10][2][][] */ -56, -30, -112, 
  /* [11][0][][] */ 108, -109, 44, 
  /* [11][1][][] */ 127, 4, 102, 
  /* [11][2][][] */ 24, 85, -44, 
  /* [12][0][][] */ 66, -103, 27, 
  /* [12][1][][] */ 77, -115, -10, 
  /* [12][2][][] */ 64, -127, -36, 
  /* [13][0][][] */ -8, -49, -127, 
  /* [13][1][][] */ -7, 86, 21, 
  /* [13][2][][] */ -42, 48, -7, 
  /* [14][0][][] */ -67, -9, 127, 
  /* [14][1][][] */ -49, -41, 19, 
  /* [14][2][][] */ -111, -96, 111, 
  /* [15][0][][] */ -71, -67, 52, 
  /* [15][1][][] */ 127, 50, 13, 
  /* [15][2][][] */ 97, 118, -45, 
  /* [16][0][][] */ -29, 44, 32, 
  /* [16][1][][] */ -28, -54, 22, 
  /* [16][2][][] */ -127, -121, 77, 
  /* [17][0][][] */ -72, 56, -14, 
  /* [17][1][][] */ -92, 103, -118, 
  /* [17][2][][] */ -109, -54, -127, 
  /* [18][0][][] */ -90, -127, 0, 
  /* [18][1][][] */ -46, -30, -36, 
  /* [18][2][][] */ 10, -98, -35, 
  /* [19][0][][] */ -39, -21, 32, 
  /* [19][1][][] */ 92, -127, 98, 
  /* [19][2][][] */ -55, -21, -58, 
  /* [20][0][][] */ -115, 8, 31, 
  /* [20][1][][] */ -8, -48, 4, 
  /* [20][2][][] */ -11, 4, -127, 
  /* [21][0][][] */ -7, -42, -21, 
  /* [21][1][][] */ -13, 7, 83, 
  /* [21][2][][] */ 118, 127, 14, 
  /* [22][0][][] */ -97, 56, -80, 
  /* [22][1][][] */ 33, 22, 11, 
  /* [22][2][][] */ -55, -127, -16, 
  /* [23][0][][] */ -27, -53, -102, 
  /* [23][1][][] */ 37, 110, 127, 
  /* [23][2][][] */ -78, -100, -57, 
  /* [24][0][][] */ 55, 67, 76, 
  /* [24][1][][] */ -127, -81, 8, 
  /* [24][2][][] */ -33, -30, 15, 
  /* [25][0][][] */ -76, -127, -117, 
  /* [25][1][][] */ 75, -38, -112, 
  /* [25][2][][] */ -2, -79, -76, 
  /* [26][0][][] */ 68, 87, 96, 
  /* [26][1][][] */ -79, 75, 66, 
  /* [26][2][][] */ -127, -35, -13, 
  /* [27][0][][] */ 127, 87, 32, 
  /* [27][1][][] */ -93, -84, -104, 
  /* [27][2][][] */ -35, -10, -6, 
  /* [28][0][][] */ 31, -43, 43, 
  /* [28][1][][] */ -78, -79, -83, 
  /* [28][2][][] */ -12, -124, -127, 
  /* [29][0][][] */ 36, -43, 8, 
  /* [29][1][][] */ 51, 127, -17, 
  /* [29][2][][] */ -59, 83, 103, 
  /* [30][0][][] */ -91, 42, 74, 
  /* [30][1][][] */ 6, -38, 127, 
  /* [30][2][][] */ -41, -61, 126, 
  /* [31][0][][] */ 96, 72, -6, 
  /* [31][1][][] */ 32, -97, 122, 
  /* [31][2][][] */ -127, -86, -104, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 32,3,3,1 } };
const TfArray<32, float> quant6_scale = { 32, { 0.0010932006407529116, 0.0013783278409391642, 0.0010746355401352048, 0.0017315702280029655, 0.0013302810257300735, 0.0019040569895878434, 0.0020723508205264807, 0.0015112058026716113, 0.0017469730228185654, 0.0015150097897276282, 0.00088080414570868015, 0.0010297541739419103, 0.00098792288918048143, 0.001250201603397727, 0.0011801873333752155, 0.0013482050271704793, 0.001459393766708672, 0.00092300277901813388, 0.0010477142641320825, 0.0012156954035162926, 0.00090189574984833598, 0.001666495343670249, 0.0018108320655301213, 0.0013102318625897169, 0.0014112021308392286, 0.0010443853680044413, 0.0018853510264307261, 0.0013807332143187523, 0.0012725858250632882, 0.0010121564846485853, 0.0016642730915918946, 0.0011951810447499156, } };
const TfArray<32, int> quant6_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[16*3*3*32] = { 
  /* [0][0][][] */ 16,-27,16,15,-20,-24,-79,-22,1,-18,-16,-19,1,20,33,-28,-11,-104,14,26,6,-1,-53,26,24,-5,-21,59,-88,-23,-23,39, 1,-22,47,-26,-16,-21,-45,-23,-40,-3,-17,-4,5,40,71,-6,17,-78,-16,37,6,-23,-127,4,31,2,-14,29,-97,-16,28,6, -15,-6,-21,-1,-9,2,-24,22,-15,12,14,10,-46,14,31,12,45,-37,5,-16,4,13,-66,-55,19,-15,7,-15,-75,-6,20,-10, 
  /* [0][1][][] */ 29,-32,15,5,1,-19,-32,-23,-33,-17,-15,-23,-17,16,37,0,-32,-87,-8,33,17,5,-31,43,1,3,-12,32,-81,3,11,-7, -21,-36,10,-48,1,-15,-11,10,-24,11,-3,-19,-50,7,78,12,24,-83,-4,26,-16,10,-89,16,-16,-8,-16,-44,-93,-5,83,-20, -22,11,-45,21,17,13,-29,0,4,19,16,20,-74,-3,20,30,1,-27,10,-38,-16,7,-30,9,-15,3,18,-53,-82,18,58,-46, 
  /* [0][2][][] */ 46,-19,1,-19,-23,0,-81,9,-33,-16,18,-18,-27,28,15,-7,-7,-79,10,14,5,-10,-20,16,5,-7,-8,51,-30,-9,0,-15, 21,-18,-19,-18,0,-6,-51,23,-14,-6,16,22,-21,-13,48,17,-5,-104,14,14,3,6,-35,16,45,-8,1,32,-79,-3,63,0, 19,24,-15,24,4,38,-71,29,45,15,12,30,-13,5,19,34,3,-43,7,7,14,29,-6,28,26,-16,25,17,-61,9,54,12, 
  /* [1][0][][] */ 27,13,-5,-14,-2,6,-53,5,-13,-9,-6,3,7,8,7,-2,12,-31,5,38,11,-5,-63,0,26,-15,0,57,-84,7,6,50, 18,8,29,2,0,9,-49,-10,-3,-7,16,-3,9,-1,26,13,-6,-98,10,32,-14,-1,-127,-18,4,10,-4,43,-94,-12,-7,51, -5,3,7,0,11,-1,-6,2,-5,9,7,-5,0,18,38,1,21,19,-14,-4,10,-6,-61,6,11,4,11,10,-102,-9,11,26, 
  /* [1][1][][] */ 26,0,11,-6,-1,-7,-6,-21,7,0,1,-13,29,9,10,-7,10,-8,-4,16,-8,-2,-5,-6,10,-8,12,46,47,-5,-18,2, 22,-7,20,5,-4,-24,-3,-10,-19,-8,9,-17,18,7,27,-12,11,-13,-16,19,-2,-19,-15,23,31,-10,3,55,48,-23,13,19, 3,-16,-19,-8,-12,-14,2,2,-11,-6,-1,-8,-3,-7,45,13,30,10,6,-10,-7,4,-33,24,9,-11,12,31,65,4,49,-5, 
  /* [1][2][][] */ -14,2,5,-22,16,-20,-121,10,-1,-2,-13,14,-19,0,-28,-6,-25,-56,-5,-21,5,-2,-15,2,-27,-5,-10,-13,-97,13,7,-9, 5,-10,-3,-6,11,-21,-127,16,-13,10,-11,-9,-4,-1,1,-4,-81,-94,0,12,3,-6,-44,37,-13,14,-3,-51,-87,14,-7,-31, 2,-7,-6,-1,11,-8,-93,15,13,14,2,-4,-10,1,13,-7,-19,16,-15,-3,-12,1,-21,16,5,8,11,-30,-56,22,42,-3, 
  /* [2][0][][] */ -8,25,-65,-58,-4,40,-74,-25,18,2,-3,19,26,-84,30,5,38,7,-6,-28,1,0,-117,-85,33,9,31,41,-27,25,61,25, 16,18,-68,-24,1,21,-65,-5,27,3,11,21,16,-49,1,11,-9,-52,12,-25,7,14,-120,-98,20,-1,12,31,-52,24,48,24, 9,30,-40,-52,-19,17,-67,-1,3,-14,-10,2,43,-64,5,-5,-16,-47,0,-7,-13,-2,-127,-111,17,-7,19,36,-48,13,36,33, 
  /* [2][1][][] */ 18,7,14,0,-14,11,-70,-36,26,-20,-15,-12,51,40,54,-31,76,35,-15,18,-2,-27,-39,-21,39,5,8,37,-19,-4,72,29, 24,17,5,35,-4,4,-51,-25,40,-7,-10,-5,43,22,39,-28,56,2,-13,5,8,-29,-51,-36,2,-15,-2,18,-43,-11,75,21, 36,-13,31,10,-8,1,-18,-31,42,-17,-12,-22,56,8,47,-6,55,29,5,11,8,-27,-24,-11,18,-2,-15,22,-56,-9,25,9, 
  /* [2][2][][] */ 48,6,41,48,-20,18,-49,-40,10,-22,-7,-19,86,29,73,-31,101,97,13,52,7,-32,-26,-42,55,12,2,57,55,-17,32,41, 48,-6,18,31,-13,-5,33,-20,9,-1,4,-1,101,20,57,-23,112,63,8,47,-8,-15,-22,-49,39,-7,8,66,48,-26,43,39, 50,-15,29,44,-16,-6,34,-12,1,-20,12,-20,88,12,91,-35,120,91,-7,36,2,-29,-29,-39,23,-15,-6,56,42,-12,33,38, 
  /* [3][0][][] */ -58,6,-16,-13,-1,8,10,21,-5,-1,3,17,-34,18,-8,6,-3,-20,8,-41,-9,15,-26,-6,-11,-13,-5,-44,87,-2,9,-56, -34,17,-12,0,0,-4,13,8,-3,-1,-6,7,-52,5,-57,10,37,57,9,-36,-12,17,16,-23,-26,7,12,-44,80,-3,23,-60, -31,9,-17,-18,2,8,27,18,9,-12,-13,17,-50,-15,-55,-5,57,-22,16,-30,15,15,-1,-17,-14,0,2,-39,72,-8,8,-39, 
  /* [3][1][][] */ -107,-5,-54,-50,-6,8,59,5,-1,22,-9,12,-93,-18,-28,8,-14,-26,7,-81,10,16,-114,-10,-24,10,-10,-127,-4,24,2,-107, -93,20,-76,-25,-5,-16,33,0,18,8,0,14,-70,-24,-119,3,-22,24,-11,-103,13,15,-91,-2,-21,-14,-11,-121,10,-1,19,-124, -19,17,-60,-3,-8,-6,17,5,-4,-1,-15,9,-59,-2,-113,5,-11,-56,15,-95,-10,1,-82,4,-10,-5,10,-56,-38,-7,-3,-96, 
  /* [3][2][][] */ -63,10,-71,-35,17,-3,-88,3,2,13,12,-2,-34,-40,-1,24,-2,10,1,-35,-7,4,8,7,-14,-8,23,-35,-46,21,8,-21, -75,-2,-82,-17,-2,15,-17,23,-5,19,-5,-1,-28,-61,-43,10,13,-17,15,-34,0,23,9,18,4,1,-5,-51,-77,5,14,-9, -26,6,-41,-6,8,24,-42,6,2,21,-12,9,-35,-8,-57,24,11,-44,-12,-7,-2,-6,21,20,-8,-9,0,-18,-54,6,7,-2, 
  /* [4][0][][] */ 16,22,39,15,17,9,-6,22,10,-1,5,-2,17,4,-3,33,38,-4,22,-4,-12,30,-56,23,-25,11,-27,38,19,0,-34,-18, -9,-10,43,-20,10,21,-38,-10,7,-32,-8,14,37,6,17,-8,0,-56,4,34,-24,-7,-81,-15,-11,-1,-37,31,13,-19,-40,31, 30,7,56,2,14,-14,2,-28,-36,-8,-18,-31,42,30,28,-18,-32,-12,17,12,16,-11,2,11,-33,-15,9,47,12,-30,-39,31, 
  /* [4][1][][] */ 34,17,9,-1,-17,15,-29,25,37,25,13,18,21,5,-49,-5,2,45,21,-34,-14,0,-28,-3,15,-4,-6,64,119,19,-13,4, 39,26,-2,-7,-29,23,13,-18,20,-5,12,-18,46,-12,-5,13,31,61,-11,25,-14,0,14,0,-5,-1,-32,66,118,14,-14,25, 80,-33,24,-13,-31,-39,-19,-32,17,-20,12,8,44,-19,52,-29,20,47,25,5,-24,-38,9,21,0,-11,-2,57,127,-26,-37,17, 
  /* [4][2][][] */ 11,45,-22,-23,18,15,-93,9,63,-1,11,37,1,44,-28,13,6,-15,-24,-44,-29,41,-15,2,-28,3,33,-33,-36,2,29,-18, 4,5,6,-9,19,34,12,22,57,22,-4,14,52,16,1,13,1,-18,-24,-35,-25,-16,-10,27,-4,-15,-13,16,-32,27,12,16, 88,-4,13,41,0,-6,100,17,26,-10,12,-20,4,32,7,-4,-41,14,-5,-17,-8,8,-23,-8,13,8,-25,19,-15,2,-57,-1, 
  /* [5][0][][] */ 54,-6,-8,19,3,29,-14,5,-6,-17,-13,5,24,12,5,-13,12,-98,6,8,10,-8,-58,45,3,10,7,56,-90,-14,-6,58, 18,-4,23,2,-1,13,-19,-17,-5,10,0,3,12,20,59,3,48,-65,2,32,-9,6,-64,19,29,17,7,45,-92,10,44,57, 2,2,16,25,3,20,-4,3,0,-9,3,-3,7,5,31,-6,49,-69,-11,18,-2,-13,-35,21,18,1,3,46,-88,16,32,34, 
  /* [5][1][][] */ 19,-17,9,-18,-1,2,-80,1,6,-18,13,-15,15,-7,-3,-12,5,-54,-2,-12,-15,1,-117,-24,-19,11,-19,22,-80,-25,-19,-21, 10,-25,-1,13,5,-22,-93,0,-29,-8,-9,-12,-20,12,45,-17,32,-23,-12,8,-5,-11,-115,-39,9,6,-11,4,-73,-17,52,-23, -2,-14,-4,5,-11,-20,-83,7,-11,1,-13,8,-34,-11,27,1,49,-75,-9,-21,10,11,-127,-24,11,4,-7,-14,-63,-12,58,-37, 
  /* [5][2][][] */ -19,-17,5,-16,14,-5,-104,6,-8,-9,9,11,-16,19,7,-2,0,-69,-14,5,-8,1,14,63,-22,7,-3,0,-53,20,34,12, -22,-7,-2,0,-2,10,-84,18,23,-5,4,17,-21,17,13,29,26,-33,13,9,2,19,-15,24,-47,3,12,-61,-59,4,68,-37, 15,19,-18,65,19,12,-102,17,50,9,9,-5,-11,-6,-3,11,16,-83,2,6,14,19,-3,25,-17,5,3,-55,-73,14,46,-17, 
  /* [6][0][][] */ 52,-2,10,8,2,10,-31,12,-4,-1,7,-18,13,19,44,-22,-56,-61,-1,24,11,-13,48,28,23,3,2,38,-82,2,15,31, 49,-4,-12,5,1,10,0,-14,-17,3,-2,0,14,4,30,-14,-53,-44,4,24,11,17,23,38,20,17,-9,40,-89,23,6,49, -2,5,-13,-11,16,15,-15,21,-18,18,20,-7,-1,-21,23,20,-80,-2,-13,0,11,17,76,51,-3,-20,26,-1,39,-7,-14,29, 
  /* [6][1][][] */ 45,-10,15,-8,-2,4,-86,-14,-3,-1,18,1,21,24,34,-20,-89,-60,4,12,-12,-4,-28,-14,28,-18,-19,50,-7,6,-1,17, 44,5,-1,-3,10,-2,-30,10,6,-2,-17,-11,-5,19,54,-5,-82,-54,12,45,12,-19,-9,13,37,-13,16,66,-44,-13,-18,21, 12,-19,-1,-15,7,6,-35,11,-18,7,10,17,-16,5,27,3,-83,17,-8,18,-14,12,-3,16,32,3,22,25,10,1,-8,12, 
  /* [6][2][][] */ 36,7,37,7,0,-9,-80,1,-4,5,11,-1,27,29,-6,-8,-125,-55,13,1,-3,-6,-6,-28,-3,-11,-16,4,-6,-12,-24,-22, 30,6,18,5,3,-13,-100,-15,-2,0,-6,-15,16,-7,8,-10,-127,-41,7,34,17,-22,-9,-54,-8,4,-12,37,-4,-6,-24,10, 19,8,14,-45,14,-4,-84,-1,-30,-14,17,-18,4,-26,45,-18,-109,37,16,11,-6,-15,-2,-40,5,-18,-11,27,19,-7,0,-5, 
  /* [7][0][][] */ 21,-22,67,-9,-12,8,-112,6,1,-23,-14,0,52,40,19,-30,-43,-5,-15,45,14,3,5,61,-3,3,-24,45,12,14,-31,9, 24,0,61,10,2,-32,-16,-10,-9,-29,-14,12,47,16,24,-32,-62,2,23,52,12,-27,2,94,-27,1,-10,43,-22,-18,-31,13, 17,-11,55,-52,-2,-9,-69,7,-25,-17,21,-17,-7,-33,37,-21,-30,32,-16,17,18,-19,1,117,10,-10,-21,18,-4,-21,1,14, 
  /* [7][1][][] */ 45,11,21,-20,16,-10,-67,0,-10,-2,-11,-15,2,34,30,-14,-24,-7,-20,30,6,18,12,59,20,-14,-2,64,-22,22,-7,35, 18,-23,44,-4,5,-27,13,25,-21,-8,-11,-12,33,46,28,2,-90,-22,-6,24,10,27,17,42,8,-19,-11,36,-23,-20,-34,11, 5,-2,1,-48,28,-24,-52,27,11,26,-23,20,-41,3,46,19,-53,19,18,6,17,32,19,31,14,25,-5,23,2,-4,3,9, 
  /* [7][2][][] */ 97,8,52,-22,21,-1,-99,-10,17,6,-13,-21,26,54,10,2,-32,-9,11,29,-24,-20,-12,-69,25,-19,25,115,112,-14,-6,2, 56,-4,48,-11,9,-12,26,0,-17,13,15,-15,3,46,51,20,-80,-13,-13,2,-6,-8,-49,-38,47,13,19,118,127,17,-8,-12, 5,-19,-9,-35,-17,12,-10,-5,5,17,15,-10,-32,-16,22,15,-12,19,5,-3,-10,11,2,-11,55,-14,6,64,121,22,1,-20, 
  /* [8][0][][] */ -2,-16,43,-19,-10,-19,-43,10,-9,-8,-17,15,70,-9,69,-1,12,84,12,27,-3,-18,127,18,-4,-19,-14,3,113,-26,-29,23, 25,-18,25,-16,14,-15,-54,8,-10,11,-8,7,32,-9,32,-16,-41,98,-15,54,-18,-26,93,6,-14,11,2,-15,101,-22,-32,-20, 6,-14,6,-21,-15,-41,-37,-14,5,-12,7,-22,42,-8,37,3,-8,90,13,46,1,-22,98,53,24,17,18,-13,107,-26,14,-17, 
  /* [8][1][][] */ 6,-4,19,-7,-12,-54,10,-27,-37,7,-7,-1,64,12,49,-16,16,113,13,55,16,-21,7,-57,-12,-14,-15,-14,104,16,-5,-8, 36,-6,8,41,2,-29,21,-29,19,-12,4,-3,40,-16,21,-14,-14,113,8,23,4,3,53,-3,7,4,-18,5,105,-6,16,2, 39,3,46,20,6,-50,-16,3,-7,14,-1,9,69,25,38,7,3,119,8,28,-10,-21,76,-19,10,15,-16,-9,103,13,-25,8, 
  /* [8][2][][] */ 43,-29,10,26,20,-10,-4,16,-41,7,-15,-1,41,30,82,-18,82,125,-2,25,-11,3,-20,-76,-1,-15,-17,6,111,1,-8,25, 27,11,8,10,26,-41,112,13,-16,-16,-14,-17,36,13,29,-8,60,116,17,39,4,0,-51,-70,-24,-11,-7,30,120,17,17,-10, 27,-20,45,7,-15,-38,88,-3,-16,21,0,-14,68,11,41,-17,62,116,-6,16,7,11,13,-42,-13,19,13,20,117,-10,0,25, 
  /* [9][0][][] */ 25,-3,4,3,16,38,-31,1,19,23,19,-9,31,10,18,-2,-12,9,16,10,4,1,34,12,-10,12,11,71,29,6,-11,19, 42,16,8,3,-8,38,1,-1,6,-7,-5,1,48,6,12,9,-48,-72,4,27,-6,15,35,43,-5,-7,-18,47,14,-9,-6,64, 61,-24,-14,-30,-6,19,-14,-21,-8,3,11,-22,16,8,10,-27,-82,-60,10,16,13,-24,36,36,24,14,11,76,-9,3,-38,51, 
  /* [9][1][][] */ 31,23,17,12,19,-10,-109,-2,30,4,-12,9,25,-5,-16,-4,-18,28,-10,1,8,-6,22,40,-13,-12,4,37,67,11,-13,18, 59,-1,0,-15,-24,-1,-64,-6,30,3,3,-20,20,1,34,1,-21,-11,7,-11,8,-9,13,41,-12,1,-14,39,89,-2,-46,-9, 29,-3,7,-26,-23,-25,-68,-19,-16,-18,-4,-15,-2,42,21,-4,-9,-10,-6,11,-13,-16,-15,30,18,-5,-15,43,100,-20,-23,1, 
  /* [9][2][][] */ 19,23,-12,-11,21,11,-127,10,47,18,0,-6,8,6,-20,10,14,4,9,-33,16,16,3,19,-11,18,-4,-20,-40,19,-8,-36, 36,6,10,-21,22,4,-71,-11,21,-8,-4,8,24,-2,4,20,-78,-83,8,-3,-14,11,6,5,-7,6,8,3,-37,-1,-31,-26, 30,-15,-7,-31,6,-2,-109,-13,4,-7,12,-21,16,1,7,16,-65,-21,-11,8,9,9,17,16,3,-2,0,-12,7,-18,-27,-4, 
  /* [10][0][][] */ 28,1,26,2,0,-16,-10,4,14,5,2,6,37,6,20,-14,-18,14,-2,17,-4,-5,127,10,12,13,9,48,94,-8,-28,25, 19,-19,6,-11,1,-17,-19,0,-21,14,8,-12,15,-7,25,12,-76,14,-10,39,4,2,114,45,16,-8,12,21,93,1,-15,2, 30,1,27,-22,-8,-19,-9,-11,-3,-6,9,8,14,3,19,-2,-62,42,2,22,5,9,116,32,3,-11,15,17,97,7,-18,25, 
  /* [10][1][][] */ 18,-5,26,-8,7,9,-38,16,5,11,-11,-7,8,21,2,-6,-18,-16,11,28,-10,-11,35,17,2,7,-8,20,31,12,-7,8, 18,-13,26,-16,-10,12,10,-13,-11,-1,-2,-2,0,4,34,-13,-71,-1,9,14,-9,-5,4,19,-16,1,10,3,46,-10,-22,-6, 11,-5,35,-7,-5,-11,-10,5,9,-10,1,8,7,14,17,0,-75,2,-8,35,-9,-5,19,28,-14,2,8,-6,47,-12,-10,-11, 
  /* [10][2][][] */ 33,-3,12,-9,-15,9,-87,-3,-14,-5,-11,6,24,7,14,-12,-20,-6,15,41,2,13,13,-10,9,-10,4,43,88,-1,-13,8, 20,-3,6,-6,6,-13,-5,-1,-14,2,-11,12,15,-12,19,5,-68,23,10,12,-12,-17,33,-25,16,-15,-12,12,79,2,-30,19, 27,-2,17,-22,-7,4,-11,-17,-13,6,12,6,31,11,17,-18,-47,22,11,29,-9,1,-7,-31,14,9,-3,37,77,-1,-28,13, 
  /* [11][0][][] */ 43,-8,2,8,-3,-3,-14,2,-6,15,11,-4,19,-4,19,19,3,-6,-16,54,16,-12,17,20,4,4,-6,52,-42,12,-3,43, 24,-8,24,-2,-2,11,-21,-13,5,-6,-6,-6,24,1,35,5,-59,-80,-5,50,11,6,9,20,5,-5,6,42,-65,-6,-11,42, 1,5,20,3,15,11,-6,-4,13,10,-5,-9,17,-10,4,6,-70,1,10,22,-1,0,-18,33,5,17,22,44,-2,22,9,53, 
  /* [11][1][][] */ 55,10,10,-1,-11,0,-71,1,18,-16,-12,-15,11,27,4,5,-11,-16,-16,21,3,3,1,-13,5,11,-11,39,31,-4,-34,-2, 49,-10,8,-20,13,-16,-86,3,-17,-17,4,-17,33,10,16,-2,-28,-31,-9,13,-17,-19,-14,-15,32,1,-4,41,21,-2,-6,18, 6,-7,8,-22,15,-13,-56,-6,-20,-8,1,-6,21,-3,19,-18,-49,5,2,19,-14,-2,-6,18,27,-1,19,29,37,6,11,15, 
  /* [11][2][][] */ 12,3,12,-13,12,-14,-127,0,11,19,16,-10,12,6,18,4,0,12,-2,8,-19,15,2,-1,-11,-7,-6,36,27,17,-23,-20, 28,-1,5,-8,-9,16,-113,10,-16,-8,-15,17,37,15,2,-10,-46,-21,-16,3,-6,15,-10,-3,7,3,-12,32,13,-11,-37,4, 2,8,18,-12,4,8,-83,11,-11,-12,-14,1,12,3,42,3,-38,11,10,20,-11,6,-16,-11,15,0,-10,9,19,2,2,3, 
  /* [12][0][][] */ -35,9,-36,-4,12,16,23,-9,1,2,17,5,-24,-18,-22,14,10,3,-9,-59,-1,15,-31,11,-24,11,3,-56,88,18,3,-58, -26,-1,-12,-12,6,7,-6,11,20,2,-18,9,-33,-18,-82,14,88,83,17,-46,-2,3,51,4,-15,-10,-6,-54,81,-4,-9,-63, -18,12,-23,8,-9,-10,-6,-2,21,3,2,6,-39,2,-68,-6,127,10,-4,-35,-15,17,18,-21,-17,5,-18,-15,92,14,16,-50, 
  /* [12][1][][] */ -97,25,-44,-49,8,2,34,13,11,21,14,21,-42,-16,-23,2,10,-10,-2,-66,19,17,-100,-20,-13,-6,-10,-109,32,7,3,-64, -75,25,-37,5,2,5,21,17,-5,16,-5,-13,-47,-18,-110,19,10,32,8,-95,14,-1,34,4,-25,11,-4,-105,39,1,1,-78, -10,17,-53,-12,-10,-1,19,-10,22,5,-12,9,-34,-20,-94,-12,84,-33,17,-57,-16,-1,-45,-11,-26,-2,10,-44,-11,19,19,-75, 
  /* [12][2][][] */ -52,7,-51,-22,22,11,-68,6,17,21,8,26,-36,-28,-48,9,4,2,-2,-52,-7,24,12,12,-1,12,3,-45,-57,15,30,-23, -60,16,-71,-4,-1,16,-30,-10,0,-7,-13,14,-24,-53,-70,16,2,-4,-6,-34,17,3,9,-3,-1,-3,-4,-62,-101,1,13,-1, -22,-1,-49,6,9,-7,-41,9,22,21,8,0,-32,-1,-49,4,19,-34,10,-46,1,4,11,8,-6,-4,16,-16,-59,3,27,3, 
  /* [13][0][][] */ 41,-9,-3,7,-19,-18,-21,-17,-29,-14,5,-13,16,10,28,-20,-34,-117,-12,42,-1,2,52,48,27,-4,8,50,-127,-6,26,52, -8,7,14,-27,3,18,-20,18,21,-17,5,-9,-13,10,45,10,-19,-63,-2,9,-6,15,-56,22,9,-6,-3,1,-118,11,52,9, -28,9,11,-8,18,9,-16,22,3,-5,-6,25,-5,3,2,12,-38,-58,-9,-9,14,-7,9,34,-33,-11,9,-20,-72,17,10,14, 
  /* [13][1][][] */ 72,-18,19,0,-11,18,-46,11,-6,1,15,0,2,13,38,-21,-33,-91,15,21,4,-20,-41,40,8,6,9,51,-39,13,-14,31, 42,6,-10,4,-4,21,-48,12,3,-7,14,3,-5,29,53,0,-56,-45,19,16,-12,21,-17,27,61,-20,2,65,-49,22,40,64, 7,-2,-14,-20,15,46,-7,-10,24,12,-5,-8,7,-20,6,25,-25,-23,19,-4,-7,-9,-18,45,46,-12,2,59,-36,-9,6,28, 
  /* [13][2][][] */ 64,-9,19,5,-23,7,-77,-4,-9,-10,-13,15,11,37,22,7,-110,-83,-15,-20,7,-17,-93,-73,-15,-4,-18,64,-61,-2,-38,-32, 65,-17,0,-15,-21,-3,-61,5,4,10,6,-11,21,-3,-3,10,-102,-81,13,19,13,-5,-54,-83,27,-2,4,40,-43,15,-8,5, 13,-22,1,-9,14,-12,-109,-4,-18,5,-11,-16,-4,-19,8,-19,-69,-24,-13,-15,-15,19,-34,-77,33,5,14,68,-13,6,3,3, 
  /* [14][0][][] */ 46,9,8,30,-13,25,-16,-9,12,9,-14,5,35,-2,6,0,20,-9,10,-3,1,12,-6,4,-12,0,13,12,-74,-5,27,24, 9,22,9,0,-8,4,-4,14,19,15,-14,15,24,-22,9,6,28,-49,-1,24,-3,-9,-41,39,7,17,12,23,-76,-14,-19,55, 36,7,29,-5,14,18,-3,-7,3,7,7,12,32,-14,3,5,17,-19,-6,30,9,7,-20,50,12,-2,4,42,-54,4,-29,44, 
  /* [14][1][][] */ 56,27,9,27,13,26,-41,2,37,11,15,8,21,4,11,12,-9,-28,13,12,5,18,-10,5,5,15,-7,69,-76,13,12,59, 5,15,37,-11,2,44,-44,0,13,-17,5,-2,16,16,15,-7,6,-97,13,20,8,-13,-44,1,28,6,5,58,-85,-18,2,58, 6,-13,19,-25,-9,28,-20,9,9,-5,5,-12,35,2,9,-1,-10,-36,6,3,1,6,-42,13,19,3,-15,27,-93,11,6,28, 
  /* [14][2][][] */ 33,7,24,33,-10,-4,-98,-2,35,-16,-2,-5,23,7,-23,2,-22,-53,-3,-16,12,-17,-78,-23,14,-15,10,47,-92,8,-33,-2, -5,2,27,-26,-21,-11,-81,3,1,-14,10,2,23,-1,4,-17,-64,-89,1,-14,0,-11,-127,-69,13,-5,-11,31,-82,-13,-28,-6, 5,0,12,-8,-16,8,-46,-6,5,-9,0,-11,20,10,21,2,-97,-42,-9,11,1,0,-109,-42,-11,-16,-13,26,-90,3,-20,12, 
  /* [15][0][][] */ 42,3,20,20,-7,-29,-10,-4,-5,4,-1,-17,53,18,22,-3,0,22,7,18,-5,6,76,19,-2,4,-3,26,93,-12,-24,8, 29,-4,6,-9,-7,-15,3,12,-9,-13,5,-16,28,16,40,-1,-43,12,2,38,9,-4,70,26,15,10,8,13,102,-8,-26,-1, 36,-14,8,-5,-4,-13,14,10,2,-19,-1,-3,49,5,43,7,-41,36,3,49,2,2,89,53,19,-3,-13,8,73,-25,-26,23, 
  /* [15][1][][] */ 20,-7,31,5,-10,-25,-24,-16,3,10,9,-13,29,19,20,2,14,53,16,12,-11,-5,32,18,8,-13,1,39,116,0,-16,-5, 26,8,28,6,-13,-27,-4,-10,-19,0,-2,1,10,12,18,-17,-4,57,-17,24,0,4,14,4,8,-3,-8,34,103,-12,-2,14, 19,0,43,0,7,-15,-5,-19,14,-13,5,-9,38,25,21,-8,15,78,-13,26,-3,-11,19,25,-5,-6,-21,6,127,7,-22,25, 
  /* [15][2][][] */ 47,-10,33,23,16,0,27,20,-6,-2,-5,-8,19,-1,11,7,12,-2,17,-4,9,-4,-7,-14,19,-13,-3,15,1,10,-27,2, 44,10,13,22,2,9,69,8,-6,-15,9,-1,29,-6,13,6,-14,19,0,-4,-9,-1,-24,-8,23,6,12,25,32,7,-14,10, 34,-10,36,2,2,-6,71,2,9,8,14,-1,25,8,41,13,20,40,-11,23,-4,18,11,-17,21,-15,9,29,24,-8,-6,5, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,3,3,32 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0061924373731017113, 0.0073358742520213127, 0.0075500980019569397, 0.0072021703235805035, 0.0044091679155826569, 0.0075798630714416504, 0.0060854475013911724, 0.0046581071801483631, 0.0052887080237269402, 0.0058713736943900585, 0.0075525729916989803, 0.0068437103182077408, 0.0064893183298408985, 0.0059066154062747955, 0.007107884157449007, 0.0067438092082738876, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<4, int> tensor_dimension8 = { 4, { 1,28,28,32 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0032537858933210373, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,14,14,32 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0032537858933210373, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,14,14,16 } };
const TfArray<1, float> quant10_scale = { 1, { 0.011734215542674065, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,7,7,16 } };
const TfArray<1, float> quant11_scale = { 1, { 0.011734215542674065, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,784 } };
const TfArray<1, float> quant12_scale = { 1, { 0.011734215542674065, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,4 } };
const TfArray<1, float> quant13_scale = { 1, { 0.50505286455154419, } };
const TfArray<1, int> quant13_zero = { 1, { 83 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,4 } };
const TfArray<1, float> quant14_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,6,2 } };
const TfArray<1, int> outputs0 = { 1, { 8 } };
const TfLitePoolParams opdata1 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs1 = { 1, { 8 } };
const TfArray<1, int> outputs1 = { 1, { 9 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 9,7,3 } };
const TfArray<1, int> outputs2 = { 1, { 10 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 10 } };
const TfArray<1, int> outputs3 = { 1, { 11 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 11,1 } };
const TfArray<1, int> outputs4 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 12,5,4 } };
const TfArray<1, int> outputs5 = { 1, { 13 } };
const TfLiteSoftmaxParams opdata6 = { 1 };
const TfArray<1, int> inputs6 = { 1, { 13 } };
const TfArray<1, int> outputs6 = { 1, { 14 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25088, (TfLiteIntArray*)&tensor_dimension0, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 25088, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 25088, (TfLiteIntArray*)&tensor_dimension9, 6272, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 3136, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3136, (TfLiteIntArray*)&tensor_dimension11, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 784, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 784, (TfLiteIntArray*)&tensor_dimension13, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 15;
  for(size_t i = 0; i < 15; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 7; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 7; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  14, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 7; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
